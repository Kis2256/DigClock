
Kursach.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fea  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ec  00800060  00000fea  0000109e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  0080034c  0080034c  0000138a  2**0
                  ALLOC
  3 .eeprom       00000005  00810000  00810000  0000138a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000138f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000148  00000000  00000000  00001400  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002607  00000000  00000000  00001548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009b3  00000000  00000000  00003b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010f3  00000000  00000000  00004502  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000318  00000000  00000000  000055f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005c3  00000000  00000000  00005910  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011ab  00000000  00000000  00005ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  0000707e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 34       	cpi	r26, 0x4C	; 76
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	ac e4       	ldi	r26, 0x4C	; 76
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c2 04 	call	0x984	; 0x984 <main>
  8a:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_send_cmd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <lcd_send_cmd+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <lcd_send_cmd+0x8>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	28 2f       	mov	r18, r24
  a0:	20 7f       	andi	r18, 0xF0	; 240
  a2:	30 e1       	ldi	r19, 0x10	; 16
  a4:	83 9f       	mul	r24, r19
  a6:	c0 01       	movw	r24, r0
  a8:	11 24       	eor	r1, r1
  aa:	92 2f       	mov	r25, r18
  ac:	9c 60       	ori	r25, 0x0C	; 12
  ae:	99 83       	std	Y+1, r25	; 0x01
  b0:	28 60       	ori	r18, 0x08	; 8
  b2:	2a 83       	std	Y+2, r18	; 0x02
  b4:	98 2f       	mov	r25, r24
  b6:	9c 60       	ori	r25, 0x0C	; 12
  b8:	9b 83       	std	Y+3, r25	; 0x03
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	8c 83       	std	Y+4, r24	; 0x04
  be:	44 e0       	ldi	r20, 0x04	; 4
  c0:	be 01       	movw	r22, r28
  c2:	6f 5f       	subi	r22, 0xFF	; 255
  c4:	7f 4f       	sbci	r23, 0xFF	; 255
  c6:	87 e2       	ldi	r24, 0x27	; 39
  c8:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Write>
  cc:	0f 90       	pop	r0
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <lcd_send_data>:
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <lcd_send_data+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <lcd_send_data+0x8>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	28 2f       	mov	r18, r24
  e8:	20 7f       	andi	r18, 0xF0	; 240
  ea:	30 e1       	ldi	r19, 0x10	; 16
  ec:	83 9f       	mul	r24, r19
  ee:	c0 01       	movw	r24, r0
  f0:	11 24       	eor	r1, r1
  f2:	92 2f       	mov	r25, r18
  f4:	9d 60       	ori	r25, 0x0D	; 13
  f6:	99 83       	std	Y+1, r25	; 0x01
  f8:	29 60       	ori	r18, 0x09	; 9
  fa:	2a 83       	std	Y+2, r18	; 0x02
  fc:	98 2f       	mov	r25, r24
  fe:	9d 60       	ori	r25, 0x0D	; 13
 100:	9b 83       	std	Y+3, r25	; 0x03
 102:	89 60       	ori	r24, 0x09	; 9
 104:	8c 83       	std	Y+4, r24	; 0x04
 106:	44 e0       	ldi	r20, 0x04	; 4
 108:	be 01       	movw	r22, r28
 10a:	6f 5f       	subi	r22, 0xFF	; 255
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	87 e2       	ldi	r24, 0x27	; 39
 110:	0e 94 0a 01 	call	0x214	; 0x214 <I2C_Write>
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_put_cur>:
	_delay_ms(10);
}
// встановлює курсор у вказану позицію
void lcd_put_cur(int row, int col)
{
	switch (row)
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	19 f0       	breq	.+6      	; 0x12c <lcd_put_cur+0xa>
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	19 f0       	breq	.+6      	; 0x130 <lcd_put_cur+0xe>
 12a:	03 c0       	rjmp	.+6      	; 0x132 <lcd_put_cur+0x10>
	{
		case 0:
		col |= 0x80; // перший рядок
 12c:	60 68       	ori	r22, 0x80	; 128
		break;
 12e:	01 c0       	rjmp	.+2      	; 0x132 <lcd_put_cur+0x10>
		case 1:
		col |= 0xC0; // другий рядок
 130:	60 6c       	ori	r22, 0xC0	; 192
		break;
	}

	lcd_send_cmd (col); // надсилає адресу позиції
 132:	86 2f       	mov	r24, r22
 134:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 138:	08 95       	ret

0000013a <lcd_init>:
}

// ініціалізує LCD дисплей
void lcd_init (void)
{
	I2C_Init();  // ініціалізація I2C
 13a:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_Init>
 13e:	87 ea       	ldi	r24, 0xA7	; 167
 140:	91 e6       	ldi	r25, 0x61	; 97
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_init+0x8>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_init+0xe>
 148:	00 00       	nop
 14a:	83 ed       	ldi	r24, 0xD3	; 211
 14c:	90 e3       	ldi	r25, 0x30	; 48
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <lcd_init+0x14>
 152:	00 c0       	rjmp	.+0      	; 0x154 <lcd_init+0x1a>
 154:	00 00       	nop
	_delay_ms(100); // затримка для запуску LCD
	// ініціалізація в 4-бітному режимі
	_delay_ms(50);  
	lcd_send_cmd (0x30);
 156:	80 e3       	ldi	r24, 0x30	; 48
 158:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 15c:	81 ee       	ldi	r24, 0xE1	; 225
 15e:	94 e0       	ldi	r25, 0x04	; 4
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_init+0x26>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_init+0x2c>
 166:	00 00       	nop
	_delay_ms(5);  
	lcd_send_cmd (0x30);
 168:	80 e3       	ldi	r24, 0x30	; 48
 16a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 16e:	89 ef       	ldi	r24, 0xF9	; 249
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_init+0x38>
 176:	00 c0       	rjmp	.+0      	; 0x178 <lcd_init+0x3e>
 178:	00 00       	nop
	_delay_ms(1); 
	lcd_send_cmd (0x30);
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 180:	83 ec       	ldi	r24, 0xC3	; 195
 182:	99 e0       	ldi	r25, 0x09	; 9
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_init+0x4a>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_init+0x50>
 18a:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd (0x20);  // 4-бітний режим
 18c:	80 e2       	ldi	r24, 0x20	; 32
 18e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 192:	83 ec       	ldi	r24, 0xC3	; 195
 194:	99 e0       	ldi	r25, 0x09	; 9
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0x5c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_init+0x62>
 19c:	00 00       	nop
	_delay_ms(10);

// конфігурація дисплея
	lcd_send_cmd (0x28);  // 2 рядки, 5x8 пікселів
 19e:	88 e2       	ldi	r24, 0x28	; 40
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 1a4:	89 ef       	ldi	r24, 0xF9	; 249
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <lcd_init+0x6e>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <lcd_init+0x74>
 1ae:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd (0x08); // вимкнути дисплей
 1b0:	88 e0       	ldi	r24, 0x08	; 8
 1b2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 1b6:	89 ef       	ldi	r24, 0xF9	; 249
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x80>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x86>
 1c0:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd (0x01);   // очистити екран
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 1c8:	83 ec       	ldi	r24, 0xC3	; 195
 1ca:	99 e0       	ldi	r25, 0x09	; 9
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x92>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x98>
 1d2:	00 00       	nop
	_delay_ms(10);
	lcd_send_cmd (0x06); // автоматичне переміщення курсора
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 1da:	89 ef       	ldi	r24, 0xF9	; 249
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0xa4>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_init+0xaa>
 1e4:	00 00       	nop
	_delay_ms(1);
	lcd_send_cmd (0x0C); // увімкнути дисплей, курсор і блимання — вимкнені
 1e6:	8c e0       	ldi	r24, 0x0C	; 12
 1e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 1ec:	08 95       	ret

000001ee <lcd_send_string>:
}
// виводить текстовий рядок на lcd
void lcd_send_string (char *str)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
	while (*str) lcd_send_data (*str++); // надсилає кожен символ
 1f4:	88 81       	ld	r24, Y
 1f6:	88 23       	and	r24, r24
 1f8:	31 f0       	breq	.+12     	; 0x206 <lcd_send_string+0x18>
 1fa:	21 96       	adiw	r28, 0x01	; 1
 1fc:	0e 94 6d 00 	call	0xda	; 0xda <lcd_send_data>
 200:	89 91       	ld	r24, Y+
 202:	81 11       	cpse	r24, r1
 204:	fb cf       	rjmp	.-10     	; 0x1fc <lcd_send_string+0xe>
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <I2C_Init>:
#include "I2C_Master.h"

// ініціалізація I2C
void I2C_Init(void)
{
	TWBR = 32;  // частота передачі (залежить від F_CPU)
 20c:	80 e2       	ldi	r24, 0x20	; 32
 20e:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;  // Прескейлер = 1
 210:	11 b8       	out	0x01, r1	; 1
 212:	08 95       	ret

00000214 <I2C_Write>:
}


uint8_t I2C_Write(uint8_t slaveAddr7b, uint8_t *data, uint8_t size) // функція використовується для відправки даних по I2C ( slaveAddr7b - 7-бітна I2C-адреса пристрою,
{																	// *data - вказівник на масив даних,  size - скільки байтів передати )
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // генерує умову, щоб почати передачу
 214:	94 ea       	ldi	r25, 0xA4	; 164
 216:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1 << TWINT))); // чекає, поки операція старту завершиться
 218:	06 b6       	in	r0, 0x36	; 54
 21a:	07 fe       	sbrs	r0, 7
 21c:	fd cf       	rjmp	.-6      	; 0x218 <I2C_Write+0x4>
	TWDR = (slaveAddr7b << 1);   // записуємо 7-бітну адресу пристрою, зсунуту вліво на 1, щоб звільнити молодший біт під RW 
 21e:	88 0f       	add	r24, r24
 220:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN); // відправляємо адресу і RW біт
 222:	84 e8       	ldi	r24, 0x84	; 132
 224:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1 << TWINT)));  // чекаємо завершення передачі
 226:	06 b6       	in	r0, 0x36	; 54
 228:	07 fe       	sbrs	r0, 7
 22a:	fd cf       	rjmp	.-6      	; 0x226 <I2C_Write+0x12>
// перевіряємо статус передачі в TWSR
	if ((TWSR & 0xF8) != 0x18) // 0x18 означає, що відправлено slave address і write bit, acknowledge отримано
 22c:	81 b1       	in	r24, 0x01	; 1
 22e:	88 7f       	andi	r24, 0xF8	; 248
 230:	88 31       	cpi	r24, 0x18	; 24
 232:	19 f4       	brne	.+6      	; 0x23a <I2C_Write+0x26>
	// якщо адреса не підтверджена пристроєм - повертає помилку
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); 
		return 1;  
	}
	// передає байти даних по черзі
	for (uint8_t i = 0; i < size; i++)
 234:	41 11       	cpse	r20, r1
 236:	05 c0       	rjmp	.+10     	; 0x242 <I2C_Write+0x2e>
 238:	1d c0       	rjmp	.+58     	; 0x274 <I2C_Write+0x60>
	while (!(TWCR & (1 << TWINT)));  // чекаємо завершення передачі
// перевіряємо статус передачі в TWSR
	if ((TWSR & 0xF8) != 0x18) // 0x18 означає, що відправлено slave address і write bit, acknowledge отримано
	{
	// якщо адреса не підтверджена пристроєм - повертає помилку
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); 
 23a:	84 e9       	ldi	r24, 0x94	; 148
 23c:	86 bf       	out	0x36, r24	; 54
		return 1;  
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	08 95       	ret
 242:	fb 01       	movw	r30, r22
 244:	41 50       	subi	r20, 0x01	; 1
 246:	84 2f       	mov	r24, r20
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	68 0f       	add	r22, r24
 24e:	79 1f       	adc	r23, r25
	}
	// передає байти даних по черзі
	for (uint8_t i = 0; i < size; i++)
	{
		TWDR = data[i]; // завантажує байт в регістр передачі
		TWCR = (1 << TWINT) | (1 << TWEN);  // запускає передачу байту
 250:	94 e8       	ldi	r25, 0x84	; 132
		return 1;  
	}
	// передає байти даних по черзі
	for (uint8_t i = 0; i < size; i++)
	{
		TWDR = data[i]; // завантажує байт в регістр передачі
 252:	81 91       	ld	r24, Z+
 254:	83 b9       	out	0x03, r24	; 3
		TWCR = (1 << TWINT) | (1 << TWEN);  // запускає передачу байту
 256:	96 bf       	out	0x36, r25	; 54
		while (!(TWCR & (1 << TWINT))); // чекає завершення передачі байту
 258:	06 b6       	in	r0, 0x36	; 54
 25a:	07 fe       	sbrs	r0, 7
 25c:	fd cf       	rjmp	.-6      	; 0x258 <I2C_Write+0x44>
// перевіряє, чи отримано підтвердження від приймача
		if ((TWSR & 0xF8) != 0x28)   // 0x28 означає, що дані відправлено
 25e:	81 b1       	in	r24, 0x01	; 1
 260:	88 7f       	andi	r24, 0xF8	; 248
 262:	88 32       	cpi	r24, 0x28	; 40
 264:	21 f0       	breq	.+8      	; 0x26e <I2C_Write+0x5a>
		{
			// якщо приймач не підтвердив - повертає помилку
			TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 266:	84 e9       	ldi	r24, 0x94	; 148
 268:	86 bf       	out	0x36, r24	; 54
			return 1;  
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	08 95       	ret
	// якщо адреса не підтверджена пристроєм - повертає помилку
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO); 
		return 1;  
	}
	// передає байти даних по черзі
	for (uint8_t i = 0; i < size; i++)
 26e:	e6 17       	cp	r30, r22
 270:	f7 07       	cpc	r31, r23
 272:	79 f7       	brne	.-34     	; 0x252 <I2C_Write+0x3e>
			TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
			return 1;  
		}
	}
 // Завершує передачу
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 274:	84 e9       	ldi	r24, 0x94	; 148
 276:	86 bf       	out	0x36, r24	; 54
	return 0;  
 278:	80 e0       	ldi	r24, 0x00	; 0
}
 27a:	08 95       	ret

0000027c <usart_Init>:
//----------------------------------------------------|
//----------------------------------------------------|
//				Ініціалізація  USART				  |
//----------------------------------------------------|
void usart_Init(unsigned int ubrr) {
	UBRRH = (unsigned char)(ubrr >> 8); // cтарший байт UBRR
 27c:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;		// молодший байт UBRR
 27e:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << TXEN) | (1 << RXEN);	// увімкнення TX та RX
 280:	88 e1       	ldi	r24, 0x18	; 24
 282:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0); 
 284:	86 e8       	ldi	r24, 0x86	; 134
 286:	80 bd       	out	0x20, r24	; 32
	DDRD &= ~0x01; // PD0 як вхід (RX)
 288:	88 98       	cbi	0x11, 0	; 17
	DDRD |= 0x02;  // PD1 як вихід (TX)
 28a:	89 9a       	sbi	0x11, 1	; 17
 28c:	08 95       	ret

0000028e <usart_Transmit>:
}

void usart_Transmit(unsigned char data) {
	while (!(UCSRA & (1 << UDRE))); //перевіряє чи вільний регістр
 28e:	5d 9b       	sbis	0x0b, 5	; 11
 290:	fe cf       	rjmp	.-4      	; 0x28e <usart_Transmit>
	UDR = data;			// Повертаємо отриманий символ
 292:	8c b9       	out	0x0c, r24	; 12
 294:	08 95       	ret

00000296 <send_str>:
}

void send_str(const char* str) {
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	ec 01       	movw	r28, r24
	while (*str) {
 29c:	88 81       	ld	r24, Y
 29e:	88 23       	and	r24, r24
 2a0:	61 f0       	breq	.+24     	; 0x2ba <send_str+0x24>
 2a2:	21 96       	adiw	r28, 0x01	; 1
		usart_Transmit(*str++); // передаємо символ за символом
 2a4:	0e 94 47 01 	call	0x28e	; 0x28e <usart_Transmit>
 2a8:	8f ec       	ldi	r24, 0xCF	; 207
 2aa:	97 e0       	ldi	r25, 0x07	; 7
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <send_str+0x16>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <send_str+0x1c>
 2b2:	00 00       	nop
	while (!(UCSRA & (1 << UDRE))); //перевіряє чи вільний регістр
	UDR = data;			// Повертаємо отриманий символ
}

void send_str(const char* str) {
	while (*str) {
 2b4:	89 91       	ld	r24, Y+
 2b6:	81 11       	cpse	r24, r1
 2b8:	f5 cf       	rjmp	.-22     	; 0x2a4 <send_str+0xe>
		usart_Transmit(*str++); // передаємо символ за символом
		_delay_ms(1); // затримка між символами
	}
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <usart_Receive>:

unsigned char usart_Receive(void) {
	while (!(UCSRA & (1 << RXC))); // очікуємо на прийом символу
 2c0:	5f 9b       	sbis	0x0b, 7	; 11
 2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <usart_Receive>
	return UDR;	 // повертаємо отриманий символ
 2c4:	8c b1       	in	r24, 0x0c	; 12
}
 2c6:	08 95       	ret

000002c8 <usart_ReceiveLine>:

void usart_ReceiveLine(char* buffer, int max_len) {
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	6c 01       	movw	r12, r24
 2d8:	7b 01       	movw	r14, r22
	int i = 0;
	char c;
	send_str("\r\n");
 2da:	82 e6       	ldi	r24, 0x62	; 98
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
	while (!(UCSRA & (1 << RXC))); // очікуємо на прийом символу
	return UDR;	 // повертаємо отриманий символ
}

void usart_ReceiveLine(char* buffer, int max_len) {
	int i = 0;
 2e2:	00 e0       	ldi	r16, 0x00	; 0
 2e4:	10 e0       	ldi	r17, 0x00	; 0
	char c;
	send_str("\r\n");
	while (i < max_len - 1) {
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	e8 1a       	sub	r14, r24
 2ea:	f1 08       	sbc	r15, r1
 2ec:	20 c0       	rjmp	.+64     	; 0x32e <usart_ReceiveLine+0x66>
		c = usart_Receive(); // отримуємо символ
 2ee:	0e 94 60 01 	call	0x2c0	; 0x2c0 <usart_Receive>
 2f2:	c8 2f       	mov	r28, r24
		if ((c == '\b' || c == 0x7F) && i > 0) {
 2f4:	88 30       	cpi	r24, 0x08	; 8
 2f6:	39 f1       	breq	.+78     	; 0x346 <usart_ReceiveLine+0x7e>
 2f8:	8f 37       	cpi	r24, 0x7F	; 127
 2fa:	69 f4       	brne	.+26     	; 0x316 <usart_ReceiveLine+0x4e>
 2fc:	24 c0       	rjmp	.+72     	; 0x346 <usart_ReceiveLine+0x7e>
			i--;	// обробка клавіші backspace
 2fe:	01 50       	subi	r16, 0x01	; 1
 300:	11 09       	sbc	r17, r1
			usart_Transmit('\b');
 302:	88 e0       	ldi	r24, 0x08	; 8
 304:	0e 94 47 01 	call	0x28e	; 0x28e <usart_Transmit>
			usart_Transmit(' ');
 308:	80 e2       	ldi	r24, 0x20	; 32
 30a:	0e 94 47 01 	call	0x28e	; 0x28e <usart_Transmit>
			usart_Transmit('\b');
 30e:	88 e0       	ldi	r24, 0x08	; 8
 310:	0e 94 47 01 	call	0x28e	; 0x28e <usart_Transmit>
			continue;
 314:	0c c0       	rjmp	.+24     	; 0x32e <usart_ReceiveLine+0x66>
		}
		usart_Transmit(c); // вивід введених користувачем символів
 316:	0e 94 47 01 	call	0x28e	; 0x28e <usart_Transmit>
		if (c == '\r' || c == '\n') break; // кінець рядка
 31a:	cd 30       	cpi	r28, 0x0D	; 13
 31c:	59 f0       	breq	.+22     	; 0x334 <usart_ReceiveLine+0x6c>
 31e:	ca 30       	cpi	r28, 0x0A	; 10
 320:	49 f0       	breq	.+18     	; 0x334 <usart_ReceiveLine+0x6c>
		buffer[i++] = c;
 322:	f6 01       	movw	r30, r12
 324:	e0 0f       	add	r30, r16
 326:	f1 1f       	adc	r31, r17
 328:	c0 83       	st	Z, r28
 32a:	0f 5f       	subi	r16, 0xFF	; 255
 32c:	1f 4f       	sbci	r17, 0xFF	; 255

void usart_ReceiveLine(char* buffer, int max_len) {
	int i = 0;
	char c;
	send_str("\r\n");
	while (i < max_len - 1) {
 32e:	0e 15       	cp	r16, r14
 330:	1f 05       	cpc	r17, r15
 332:	ec f2       	brlt	.-70     	; 0x2ee <usart_ReceiveLine+0x26>
		}
		usart_Transmit(c); // вивід введених користувачем символів
		if (c == '\r' || c == '\n') break; // кінець рядка
		buffer[i++] = c;
	}
	buffer[i] = '\0'; // завершення рядка
 334:	f6 01       	movw	r30, r12
 336:	e0 0f       	add	r30, r16
 338:	f1 1f       	adc	r31, r17
 33a:	10 82       	st	Z, r1
}
 33c:	08 c0       	rjmp	.+16     	; 0x34e <usart_ReceiveLine+0x86>
			usart_Transmit('\b');
			usart_Transmit(' ');
			usart_Transmit('\b');
			continue;
		}
		usart_Transmit(c); // вивід введених користувачем символів
 33e:	8c 2f       	mov	r24, r28
 340:	0e 94 47 01 	call	0x28e	; 0x28e <usart_Transmit>
 344:	ee cf       	rjmp	.-36     	; 0x322 <usart_ReceiveLine+0x5a>
	int i = 0;
	char c;
	send_str("\r\n");
	while (i < max_len - 1) {
		c = usart_Receive(); // отримуємо символ
		if ((c == '\b' || c == 0x7F) && i > 0) {
 346:	10 16       	cp	r1, r16
 348:	11 06       	cpc	r1, r17
 34a:	cc f2       	brlt	.-78     	; 0x2fe <usart_ReceiveLine+0x36>
 34c:	f8 cf       	rjmp	.-16     	; 0x33e <usart_ReceiveLine+0x76>
		usart_Transmit(c); // вивід введених користувачем символів
		if (c == '\r' || c == '\n') break; // кінець рядка
		buffer[i++] = c;
	}
	buffer[i] = '\0'; // завершення рядка
}
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	df 90       	pop	r13
 35a:	cf 90       	pop	r12
 35c:	08 95       	ret

0000035e <save_time_to_eeprom>:
uint8_t EEMEM eeprom_minutes;
uint8_t EEMEM eeprom_seconds;
uint16_t EEMEM eeprom_mseconds;

void save_time_to_eeprom(void) {
	eeprom_update_byte(&eeprom_hours, (uint8_t)hours); // збереження години
 35e:	60 91 5c 03 	lds	r22, 0x035C	; 0x80035c <hours>
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <eeprom_update_byte>
	eeprom_update_byte(&eeprom_minutes, (uint8_t)minutes); // збереження хвилини
 36a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <eeprom_update_byte>
	eeprom_update_byte(&eeprom_seconds, (uint8_t)seconds); // збереження секунд
 376:	60 91 5e 03 	lds	r22, 0x035E	; 0x80035e <seconds>
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <eeprom_update_byte>
	eeprom_update_byte(&eeprom_mseconds, (uint16_t)mseconds); // збереження мілісекунд
 382:	60 91 60 03 	lds	r22, 0x0360	; 0x800360 <mseconds>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <eeprom_update_byte>
 38e:	08 95       	ret

00000390 <load_time_from_eeprom>:
}

void load_time_from_eeprom(void) {
 390:	ef 92       	push	r14
 392:	ff 92       	push	r15
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
	hours = eeprom_read_byte(&eeprom_hours); 
 39c:	84 e0       	ldi	r24, 0x04	; 4
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <eeprom_read_byte>
 3a4:	e8 2e       	mov	r14, r24
 3a6:	f1 2c       	mov	r15, r1
 3a8:	f0 92 5d 03 	sts	0x035D, r15	; 0x80035d <hours+0x1>
 3ac:	e0 92 5c 03 	sts	0x035C, r14	; 0x80035c <hours>
	minutes = eeprom_read_byte(&eeprom_minutes);
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <eeprom_read_byte>
 3b8:	08 2f       	mov	r16, r24
 3ba:	10 e0       	ldi	r17, 0x00	; 0
 3bc:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3c0:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
	seconds = eeprom_read_byte(&eeprom_seconds);
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 da 07 	call	0xfb4	; 0xfb4 <eeprom_read_byte>
 3cc:	c8 2f       	mov	r28, r24
 3ce:	d0 e0       	ldi	r29, 0x00	; 0
 3d0:	d0 93 5f 03 	sts	0x035F, r29	; 0x80035f <seconds+0x1>
 3d4:	c0 93 5e 03 	sts	0x035E, r28	; 0x80035e <seconds>
	mseconds = eeprom_read_byte(&eeprom_mseconds);
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 da 07 	call	0xfb4	; 0xfb4 <eeprom_read_byte>
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <mseconds+0x1>
 3e6:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <mseconds>
	// перевірка на коректність зчитаних даних
	if (hours > 23) hours = 0;
 3ea:	88 e1       	ldi	r24, 0x18	; 24
 3ec:	e8 16       	cp	r14, r24
 3ee:	f1 04       	cpc	r15, r1
 3f0:	24 f0       	brlt	.+8      	; 0x3fa <load_time_from_eeprom+0x6a>
 3f2:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <hours+0x1>
 3f6:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <hours>
	if (minutes > 59) minutes = 0;
 3fa:	0c 33       	cpi	r16, 0x3C	; 60
 3fc:	11 05       	cpc	r17, r1
 3fe:	24 f0       	brlt	.+8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 400:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 404:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	if (seconds > 59) seconds = 0;
 408:	ec 97       	sbiw	r28, 0x3c	; 60
 40a:	24 f0       	brlt	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 40c:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <seconds+0x1>
 410:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <seconds>
	if (mseconds > 999) mseconds = 0;
}
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	08 95       	ret

00000422 <Timer1_Init>:
//----------------------------------------------------|
//				Налаштування таймера    			  |
//----------------------------------------------------|

void Timer1_Init(){ 
	TCCR1A = 0; // звичайний режим
 422:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10); // CTC + дільник на 64
 424:	8b e0       	ldi	r24, 0x0B	; 11
 426:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 125; // TOP-значення, яке задає інтервал: 8 МГц / 64 / 125 = 1 кГц (1 мс)
 428:	8d e7       	ldi	r24, 0x7D	; 125
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	9b bd       	out	0x2b, r25	; 43
 42e:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);  // дозволити переривання
 430:	89 b7       	in	r24, 0x39	; 57
 432:	80 61       	ori	r24, 0x10	; 16
 434:	89 bf       	out	0x39, r24	; 57
	sei(); // глобальний дозвіл переривань
 436:	78 94       	sei
 438:	08 95       	ret

0000043a <__vector_6>:
}

ISR(TIMER1_COMPA_vect){
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	2f 93       	push	r18
 446:	3f 93       	push	r19
 448:	4f 93       	push	r20
 44a:	5f 93       	push	r21
 44c:	6f 93       	push	r22
 44e:	7f 93       	push	r23
 450:	8f 93       	push	r24
 452:	9f 93       	push	r25
 454:	af 93       	push	r26
 456:	bf 93       	push	r27
 458:	ef 93       	push	r30
 45a:	ff 93       	push	r31
// годинник
		mseconds++;
 45c:	80 91 60 03 	lds	r24, 0x0360	; 0x800360 <mseconds>
 460:	90 91 61 03 	lds	r25, 0x0361	; 0x800361 <mseconds+0x1>
 464:	01 96       	adiw	r24, 0x01	; 1
		if (mseconds >= 1000){
 466:	88 3e       	cpi	r24, 0xE8	; 232
 468:	23 e0       	ldi	r18, 0x03	; 3
 46a:	92 07       	cpc	r25, r18
 46c:	2c f4       	brge	.+10     	; 0x478 <__stack+0x19>
	sei(); // глобальний дозвіл переривань
}

ISR(TIMER1_COMPA_vect){
// годинник
		mseconds++;
 46e:	90 93 61 03 	sts	0x0361, r25	; 0x800361 <mseconds+0x1>
 472:	80 93 60 03 	sts	0x0360, r24	; 0x800360 <mseconds>
 476:	3d c0       	rjmp	.+122    	; 0x4f2 <__stack+0x93>
		if (mseconds >= 1000){
			mseconds = 0;
 478:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <mseconds+0x1>
 47c:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <mseconds>
			seconds++;
 480:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <seconds>
 484:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <seconds+0x1>
 488:	01 96       	adiw	r24, 0x01	; 1
			if (seconds >= 60){
 48a:	8c 33       	cpi	r24, 0x3C	; 60
 48c:	91 05       	cpc	r25, r1
 48e:	2c f4       	brge	.+10     	; 0x49a <__stack+0x3b>
ISR(TIMER1_COMPA_vect){
// годинник
		mseconds++;
		if (mseconds >= 1000){
			mseconds = 0;
			seconds++;
 490:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <seconds+0x1>
 494:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <seconds>
 498:	2c c0       	rjmp	.+88     	; 0x4f2 <__stack+0x93>
			if (seconds >= 60){
				seconds = 0;
 49a:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <seconds+0x1>
 49e:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <seconds>
				minutes++;
 4a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4a6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4aa:	01 96       	adiw	r24, 0x01	; 1
				if (minutes >= 60){
 4ac:	8c 33       	cpi	r24, 0x3C	; 60
 4ae:	91 05       	cpc	r25, r1
 4b0:	2c f4       	brge	.+10     	; 0x4bc <__stack+0x5d>
		if (mseconds >= 1000){
			mseconds = 0;
			seconds++;
			if (seconds >= 60){
				seconds = 0;
				minutes++;
 4b2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 4ba:	1b c0       	rjmp	.+54     	; 0x4f2 <__stack+0x93>
				if (minutes >= 60){
					minutes = 0;
 4bc:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 4c0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
					hours = (hours + 1) % 24;
 4c4:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <hours>
 4c8:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <hours+0x1>
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	68 e1       	ldi	r22, 0x18	; 24
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	0e 94 71 07 	call	0xee2	; 0xee2 <__divmodhi4>
 4d6:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <hours+0x1>
 4da:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <hours>
					
					hour_changed = 1; // прапорець, що змінився час
 4de:	21 e0       	ldi	r18, 0x01	; 1
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	30 93 51 03 	sts	0x0351, r19	; 0x800351 <hour_changed+0x1>
 4e6:	20 93 50 03 	sts	0x0350, r18	; 0x800350 <hour_changed>
					led_blinks_remaining = hours;  // кількість миготінь діода
 4ea:	90 93 4f 03 	sts	0x034F, r25	; 0x80034f <led_blinks_remaining+0x1>
 4ee:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <led_blinks_remaining>
				}
			}
		}

		autosave_counter++; 
 4f2:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <__data_end>
 4f6:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <__data_end+0x1>
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <__data_end+0x1>
 500:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <__data_end>
		if (autosave_counter >= 60) {  // Збереження раз на 60 секунд
 504:	cc 97       	sbiw	r24, 0x3c	; 60
 506:	34 f0       	brlt	.+12     	; 0x514 <__stack+0xb5>
		save_time_to_eeprom();
 508:	0e 94 af 01 	call	0x35e	; 0x35e <save_time_to_eeprom>
		autosave_counter = 0;
 50c:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <__data_end+0x1>
 510:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <__data_end>
		}

// секундомір
		if (stopwatch){
 514:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <stopwatch>
 518:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <stopwatch+0x1>
 51c:	89 2b       	or	r24, r25
 51e:	e9 f1       	breq	.+122    	; 0x59a <__stack+0x13b>
			sw_msec++;
 520:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <sw_msec>
 524:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <sw_msec+0x1>
 528:	01 96       	adiw	r24, 0x01	; 1
			if (sw_msec >= 1000){
 52a:	88 3e       	cpi	r24, 0xE8	; 232
 52c:	23 e0       	ldi	r18, 0x03	; 3
 52e:	92 07       	cpc	r25, r18
 530:	2c f4       	brge	.+10     	; 0x53c <__stack+0xdd>
		autosave_counter = 0;
		}

// секундомір
		if (stopwatch){
			sw_msec++;
 532:	90 93 5b 03 	sts	0x035B, r25	; 0x80035b <sw_msec+0x1>
 536:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <sw_msec>
 53a:	2f c0       	rjmp	.+94     	; 0x59a <__stack+0x13b>
			if (sw_msec >= 1000){
				sw_msec = 0;
 53c:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <sw_msec+0x1>
 540:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <sw_msec>
				sw_sec++;
 544:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <sw_sec>
 548:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <sw_sec+0x1>
 54c:	01 96       	adiw	r24, 0x01	; 1
				if (sw_sec >= 60){
 54e:	8c 33       	cpi	r24, 0x3C	; 60
 550:	91 05       	cpc	r25, r1
 552:	2c f4       	brge	.+10     	; 0x55e <__stack+0xff>
// секундомір
		if (stopwatch){
			sw_msec++;
			if (sw_msec >= 1000){
				sw_msec = 0;
				sw_sec++;
 554:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <sw_sec+0x1>
 558:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <sw_sec>
 55c:	1e c0       	rjmp	.+60     	; 0x59a <__stack+0x13b>
				if (sw_sec >= 60){
					sw_sec = 0;
 55e:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <sw_sec+0x1>
 562:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <sw_sec>
					sw_min++;
 566:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <sw_min>
 56a:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <sw_min+0x1>
 56e:	01 96       	adiw	r24, 0x01	; 1
					if (sw_min >= 60){
 570:	8c 33       	cpi	r24, 0x3C	; 60
 572:	91 05       	cpc	r25, r1
 574:	2c f4       	brge	.+10     	; 0x580 <__stack+0x121>
			if (sw_msec >= 1000){
				sw_msec = 0;
				sw_sec++;
				if (sw_sec >= 60){
					sw_sec = 0;
					sw_min++;
 576:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <sw_min+0x1>
 57a:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <sw_min>
 57e:	0d c0       	rjmp	.+26     	; 0x59a <__stack+0x13b>
					if (sw_min >= 60){
						sw_min = 0;
 580:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <sw_min+0x1>
 584:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <sw_min>
						sw_hr++;
 588:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <sw_hr>
 58c:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <sw_hr+0x1>
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <sw_hr+0x1>
 596:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <sw_hr>
					}
				}
			}
		}
}
 59a:	ff 91       	pop	r31
 59c:	ef 91       	pop	r30
 59e:	bf 91       	pop	r27
 5a0:	af 91       	pop	r26
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	7f 91       	pop	r23
 5a8:	6f 91       	pop	r22
 5aa:	5f 91       	pop	r21
 5ac:	4f 91       	pop	r20
 5ae:	3f 91       	pop	r19
 5b0:	2f 91       	pop	r18
 5b2:	0f 90       	pop	r0
 5b4:	0f be       	out	0x3f, r0	; 63
 5b6:	0f 90       	pop	r0
 5b8:	1f 90       	pop	r1
 5ba:	18 95       	reti

000005bc <IntToStr>:
}
//----------------------------------------------------|
//				Функції для часу					  |
//----------------------------------------------------|
//функція для відображення цілих значень у вигляді рядка
void IntToStr(int value, char* buffer, int digits){
 5bc:	ef 92       	push	r14
 5be:	ff 92       	push	r15
 5c0:	0f 93       	push	r16
 5c2:	1f 93       	push	r17
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	7b 01       	movw	r14, r22
 5ca:	8a 01       	movw	r16, r20
	for (int i = digits - 1; i >= 0; i--) {
 5cc:	9a 01       	movw	r18, r20
 5ce:	21 50       	subi	r18, 0x01	; 1
 5d0:	31 09       	sbc	r19, r1
 5d2:	82 f0       	brmi	.+32     	; 0x5f4 <IntToStr+0x38>
 5d4:	fb 01       	movw	r30, r22
 5d6:	e4 0f       	add	r30, r20
 5d8:	f5 1f       	adc	r31, r21
 5da:	eb 01       	movw	r28, r22
		buffer[i] = '0' + (value % 10);
 5dc:	2a e0       	ldi	r18, 0x0A	; 10
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	b9 01       	movw	r22, r18
 5e2:	0e 94 71 07 	call	0xee2	; 0xee2 <__divmodhi4>
 5e6:	80 5d       	subi	r24, 0xD0	; 208
 5e8:	82 93       	st	-Z, r24
		value /= 10;
 5ea:	86 2f       	mov	r24, r22
 5ec:	97 2f       	mov	r25, r23
//----------------------------------------------------|
//				Функції для часу					  |
//----------------------------------------------------|
//функція для відображення цілих значень у вигляді рядка
void IntToStr(int value, char* buffer, int digits){
	for (int i = digits - 1; i >= 0; i--) {
 5ee:	ec 17       	cp	r30, r28
 5f0:	fd 07       	cpc	r31, r29
 5f2:	b1 f7       	brne	.-20     	; 0x5e0 <IntToStr+0x24>
		buffer[i] = '0' + (value % 10);
		value /= 10;
	}
	buffer[digits] = '\0'; // завершення рядка
 5f4:	f7 01       	movw	r30, r14
 5f6:	e0 0f       	add	r30, r16
 5f8:	f1 1f       	adc	r31, r17
 5fa:	10 82       	st	Z, r1
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	ff 90       	pop	r15
 606:	ef 90       	pop	r14
 608:	08 95       	ret

0000060a <Clock>:
}
//----------------------------------------------------|
//----------------------------------------------------|
//		Ініціалізація годинника та секундоміра    	  |
//----------------------------------------------------|
void Clock(){
 60a:	cf 93       	push	r28
 60c:	df 93       	push	r29
 60e:	00 d0       	rcall	.+0      	; 0x610 <Clock+0x6>
 610:	00 d0       	rcall	.+0      	; 0x612 <Clock+0x8>
 612:	1f 92       	push	r1
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
	char buffer[5];
	lcd_put_cur(0,4);
 618:	64 e0       	ldi	r22, 0x04	; 4
 61a:	70 e0       	ldi	r23, 0x00	; 0
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 91 00 	call	0x122	; 0x122 <lcd_put_cur>
	IntToStr(hours, buffer, 2);
 624:	42 e0       	ldi	r20, 0x02	; 2
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	be 01       	movw	r22, r28
 62a:	6f 5f       	subi	r22, 0xFF	; 255
 62c:	7f 4f       	sbci	r23, 0xFF	; 255
 62e:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <hours>
 632:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <hours+0x1>
 636:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	lcd_send_string(buffer);
 63a:	ce 01       	movw	r24, r28
 63c:	01 96       	adiw	r24, 0x01	; 1
 63e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	lcd_send_string(":");
 642:	85 e6       	ldi	r24, 0x65	; 101
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	IntToStr(minutes, buffer, 2);
 64a:	42 e0       	ldi	r20, 0x02	; 2
 64c:	50 e0       	ldi	r21, 0x00	; 0
 64e:	be 01       	movw	r22, r28
 650:	6f 5f       	subi	r22, 0xFF	; 255
 652:	7f 4f       	sbci	r23, 0xFF	; 255
 654:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 658:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 65c:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	lcd_send_string(buffer);
 660:	ce 01       	movw	r24, r28
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	lcd_send_string(":");
 668:	85 e6       	ldi	r24, 0x65	; 101
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	IntToStr(seconds, buffer, 2);
 670:	42 e0       	ldi	r20, 0x02	; 2
 672:	50 e0       	ldi	r21, 0x00	; 0
 674:	be 01       	movw	r22, r28
 676:	6f 5f       	subi	r22, 0xFF	; 255
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <seconds>
 67e:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <seconds+0x1>
 682:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	lcd_send_string(buffer);
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
 68e:	2f ef       	ldi	r18, 0xFF	; 255
 690:	81 ee       	ldi	r24, 0xE1	; 225
 692:	94 e0       	ldi	r25, 0x04	; 4
 694:	21 50       	subi	r18, 0x01	; 1
 696:	80 40       	sbci	r24, 0x00	; 0
 698:	90 40       	sbci	r25, 0x00	; 0
 69a:	e1 f7       	brne	.-8      	; 0x694 <Clock+0x8a>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <Clock+0x94>
 69e:	00 00       	nop
	_delay_ms(200);
}
 6a0:	0f 90       	pop	r0
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	08 95       	ret

000006b0 <Stopwatch>:

void Stopwatch(){
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	00 d0       	rcall	.+0      	; 0x6b6 <Stopwatch+0x6>
 6b6:	00 d0       	rcall	.+0      	; 0x6b8 <Stopwatch+0x8>
 6b8:	1f 92       	push	r1
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
	char buffer[5];
	lcd_put_cur(0, 2);
 6be:	62 e0       	ldi	r22, 0x02	; 2
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	80 e0       	ldi	r24, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 91 00 	call	0x122	; 0x122 <lcd_put_cur>
	IntToStr(sw_hr, buffer, 2);
 6ca:	42 e0       	ldi	r20, 0x02	; 2
 6cc:	50 e0       	ldi	r21, 0x00	; 0
 6ce:	be 01       	movw	r22, r28
 6d0:	6f 5f       	subi	r22, 0xFF	; 255
 6d2:	7f 4f       	sbci	r23, 0xFF	; 255
 6d4:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <sw_hr>
 6d8:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <sw_hr+0x1>
 6dc:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	lcd_send_string(buffer);
 6e0:	ce 01       	movw	r24, r28
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	lcd_send_string(":");
 6e8:	85 e6       	ldi	r24, 0x65	; 101
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	IntToStr(sw_min, buffer, 2);
 6f0:	42 e0       	ldi	r20, 0x02	; 2
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	be 01       	movw	r22, r28
 6f6:	6f 5f       	subi	r22, 0xFF	; 255
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255
 6fa:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <sw_min>
 6fe:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <sw_min+0x1>
 702:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	lcd_send_string(buffer);
 706:	ce 01       	movw	r24, r28
 708:	01 96       	adiw	r24, 0x01	; 1
 70a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	lcd_send_string(":");
 70e:	85 e6       	ldi	r24, 0x65	; 101
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	IntToStr(sw_sec, buffer, 2);
 716:	42 e0       	ldi	r20, 0x02	; 2
 718:	50 e0       	ldi	r21, 0x00	; 0
 71a:	be 01       	movw	r22, r28
 71c:	6f 5f       	subi	r22, 0xFF	; 255
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <sw_sec>
 724:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <sw_sec+0x1>
 728:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	lcd_send_string(buffer);
 72c:	ce 01       	movw	r24, r28
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	lcd_send_string(":");
 734:	85 e6       	ldi	r24, 0x65	; 101
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
	IntToStr(sw_msec / 10, buffer, 2);
 73c:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <sw_msec>
 740:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <sw_msec+0x1>
 744:	6a e0       	ldi	r22, 0x0A	; 10
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	0e 94 71 07 	call	0xee2	; 0xee2 <__divmodhi4>
 74c:	cb 01       	movw	r24, r22
 74e:	42 e0       	ldi	r20, 0x02	; 2
 750:	50 e0       	ldi	r21, 0x00	; 0
 752:	be 01       	movw	r22, r28
 754:	6f 5f       	subi	r22, 0xFF	; 255
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	lcd_send_string(buffer);
 75c:	ce 01       	movw	r24, r28
 75e:	01 96       	adiw	r24, 0x01	; 1
 760:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
 764:	2f ef       	ldi	r18, 0xFF	; 255
 766:	81 ee       	ldi	r24, 0xE1	; 225
 768:	94 e0       	ldi	r25, 0x04	; 4
 76a:	21 50       	subi	r18, 0x01	; 1
 76c:	80 40       	sbci	r24, 0x00	; 0
 76e:	90 40       	sbci	r25, 0x00	; 0
 770:	e1 f7       	brne	.-8      	; 0x76a <Stopwatch+0xba>
 772:	00 c0       	rjmp	.+0      	; 0x774 <Stopwatch+0xc4>
 774:	00 00       	nop
	_delay_ms(200);
}
 776:	0f 90       	pop	r0
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	0f 90       	pop	r0
 780:	df 91       	pop	r29
 782:	cf 91       	pop	r28
 784:	08 95       	ret

00000786 <usart_Time>:
	}
	buffer[digits] = '\0'; // завершення рядка
}

// формування рядка часу
void usart_Time(char* timeStr) {
 786:	ef 92       	push	r14
 788:	ff 92       	push	r15
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	00 d0       	rcall	.+0      	; 0x794 <usart_Time+0xe>
 794:	1f 92       	push	r1
 796:	cd b7       	in	r28, 0x3d	; 61
 798:	de b7       	in	r29, 0x3e	; 62
 79a:	8c 01       	movw	r16, r24
	char buffer[3];
	
	IntToStr(hours, buffer, 2);
 79c:	42 e0       	ldi	r20, 0x02	; 2
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	be 01       	movw	r22, r28
 7a2:	6f 5f       	subi	r22, 0xFF	; 255
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	80 91 5c 03 	lds	r24, 0x035C	; 0x80035c <hours>
 7aa:	90 91 5d 03 	lds	r25, 0x035D	; 0x80035d <hours+0x1>
 7ae:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	strcpy(timeStr, buffer);
 7b2:	be 01       	movw	r22, r28
 7b4:	6f 5f       	subi	r22, 0xFF	; 255
 7b6:	7f 4f       	sbci	r23, 0xFF	; 255
 7b8:	c8 01       	movw	r24, r16
 7ba:	0e 94 cb 07 	call	0xf96	; 0xf96 <strcpy>
	strcat(timeStr, ":");
 7be:	f8 01       	movw	r30, r16
 7c0:	01 90       	ld	r0, Z+
 7c2:	00 20       	and	r0, r0
 7c4:	e9 f7       	brne	.-6      	; 0x7c0 <usart_Time+0x3a>
 7c6:	31 97       	sbiw	r30, 0x01	; 1
 7c8:	0f 2e       	mov	r0, r31
 7ca:	fa e3       	ldi	r31, 0x3A	; 58
 7cc:	ef 2e       	mov	r14, r31
 7ce:	f1 2c       	mov	r15, r1
 7d0:	f0 2d       	mov	r31, r0
 7d2:	f1 82       	std	Z+1, r15	; 0x01
 7d4:	e0 82       	st	Z, r14
	IntToStr(minutes, buffer, 2);
 7d6:	42 e0       	ldi	r20, 0x02	; 2
 7d8:	50 e0       	ldi	r21, 0x00	; 0
 7da:	be 01       	movw	r22, r28
 7dc:	6f 5f       	subi	r22, 0xFF	; 255
 7de:	7f 4f       	sbci	r23, 0xFF	; 255
 7e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 7e4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 7e8:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	strcat(timeStr, buffer);
 7ec:	be 01       	movw	r22, r28
 7ee:	6f 5f       	subi	r22, 0xFF	; 255
 7f0:	7f 4f       	sbci	r23, 0xFF	; 255
 7f2:	c8 01       	movw	r24, r16
 7f4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <strcat>
	strcat(timeStr, ":");
 7f8:	f8 01       	movw	r30, r16
 7fa:	01 90       	ld	r0, Z+
 7fc:	00 20       	and	r0, r0
 7fe:	e9 f7       	brne	.-6      	; 0x7fa <usart_Time+0x74>
 800:	31 97       	sbiw	r30, 0x01	; 1
 802:	f1 82       	std	Z+1, r15	; 0x01
 804:	e0 82       	st	Z, r14
	IntToStr(seconds, buffer, 2);
 806:	42 e0       	ldi	r20, 0x02	; 2
 808:	50 e0       	ldi	r21, 0x00	; 0
 80a:	be 01       	movw	r22, r28
 80c:	6f 5f       	subi	r22, 0xFF	; 255
 80e:	7f 4f       	sbci	r23, 0xFF	; 255
 810:	80 91 5e 03 	lds	r24, 0x035E	; 0x80035e <seconds>
 814:	90 91 5f 03 	lds	r25, 0x035F	; 0x80035f <seconds+0x1>
 818:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	strcat(timeStr, buffer);
 81c:	be 01       	movw	r22, r28
 81e:	6f 5f       	subi	r22, 0xFF	; 255
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	c8 01       	movw	r24, r16
 824:	0e 94 b7 07 	call	0xf6e	; 0xf6e <strcat>
}
 828:	0f 90       	pop	r0
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	ff 90       	pop	r15
 838:	ef 90       	pop	r14
 83a:	08 95       	ret

0000083c <usart_time_stopwatch>:
// секундоміра 
void usart_time_stopwatch(char* timeStr) {
 83c:	ef 92       	push	r14
 83e:	ff 92       	push	r15
 840:	0f 93       	push	r16
 842:	1f 93       	push	r17
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	00 d0       	rcall	.+0      	; 0x84a <usart_time_stopwatch+0xe>
 84a:	00 d0       	rcall	.+0      	; 0x84c <usart_time_stopwatch+0x10>
 84c:	cd b7       	in	r28, 0x3d	; 61
 84e:	de b7       	in	r29, 0x3e	; 62
 850:	8c 01       	movw	r16, r24
	char buffer[4];
	
	IntToStr(sw_hr, buffer, 2);
 852:	42 e0       	ldi	r20, 0x02	; 2
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	be 01       	movw	r22, r28
 858:	6f 5f       	subi	r22, 0xFF	; 255
 85a:	7f 4f       	sbci	r23, 0xFF	; 255
 85c:	80 91 54 03 	lds	r24, 0x0354	; 0x800354 <sw_hr>
 860:	90 91 55 03 	lds	r25, 0x0355	; 0x800355 <sw_hr+0x1>
 864:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	strcpy(timeStr, buffer);
 868:	be 01       	movw	r22, r28
 86a:	6f 5f       	subi	r22, 0xFF	; 255
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	c8 01       	movw	r24, r16
 870:	0e 94 cb 07 	call	0xf96	; 0xf96 <strcpy>
	strcat(timeStr, ":");
 874:	f8 01       	movw	r30, r16
 876:	01 90       	ld	r0, Z+
 878:	00 20       	and	r0, r0
 87a:	e9 f7       	brne	.-6      	; 0x876 <usart_time_stopwatch+0x3a>
 87c:	31 97       	sbiw	r30, 0x01	; 1
 87e:	0f 2e       	mov	r0, r31
 880:	fa e3       	ldi	r31, 0x3A	; 58
 882:	ef 2e       	mov	r14, r31
 884:	f1 2c       	mov	r15, r1
 886:	f0 2d       	mov	r31, r0
 888:	f1 82       	std	Z+1, r15	; 0x01
 88a:	e0 82       	st	Z, r14
	IntToStr(sw_min, buffer, 2);
 88c:	42 e0       	ldi	r20, 0x02	; 2
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	be 01       	movw	r22, r28
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <sw_min>
 89a:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <sw_min+0x1>
 89e:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	strcat(timeStr, buffer);
 8a2:	be 01       	movw	r22, r28
 8a4:	6f 5f       	subi	r22, 0xFF	; 255
 8a6:	7f 4f       	sbci	r23, 0xFF	; 255
 8a8:	c8 01       	movw	r24, r16
 8aa:	0e 94 b7 07 	call	0xf6e	; 0xf6e <strcat>
	strcat(timeStr, ":");
 8ae:	f8 01       	movw	r30, r16
 8b0:	01 90       	ld	r0, Z+
 8b2:	00 20       	and	r0, r0
 8b4:	e9 f7       	brne	.-6      	; 0x8b0 <usart_time_stopwatch+0x74>
 8b6:	31 97       	sbiw	r30, 0x01	; 1
 8b8:	f1 82       	std	Z+1, r15	; 0x01
 8ba:	e0 82       	st	Z, r14
	IntToStr(sw_sec, buffer, 2);
 8bc:	42 e0       	ldi	r20, 0x02	; 2
 8be:	50 e0       	ldi	r21, 0x00	; 0
 8c0:	be 01       	movw	r22, r28
 8c2:	6f 5f       	subi	r22, 0xFF	; 255
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	80 91 58 03 	lds	r24, 0x0358	; 0x800358 <sw_sec>
 8ca:	90 91 59 03 	lds	r25, 0x0359	; 0x800359 <sw_sec+0x1>
 8ce:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	strcat(timeStr, buffer);
 8d2:	be 01       	movw	r22, r28
 8d4:	6f 5f       	subi	r22, 0xFF	; 255
 8d6:	7f 4f       	sbci	r23, 0xFF	; 255
 8d8:	c8 01       	movw	r24, r16
 8da:	0e 94 b7 07 	call	0xf6e	; 0xf6e <strcat>
	strcat(timeStr, ":");
 8de:	f8 01       	movw	r30, r16
 8e0:	01 90       	ld	r0, Z+
 8e2:	00 20       	and	r0, r0
 8e4:	e9 f7       	brne	.-6      	; 0x8e0 <usart_time_stopwatch+0xa4>
 8e6:	31 97       	sbiw	r30, 0x01	; 1
 8e8:	f1 82       	std	Z+1, r15	; 0x01
 8ea:	e0 82       	st	Z, r14
	IntToStr(sw_msec, buffer, 2);
 8ec:	42 e0       	ldi	r20, 0x02	; 2
 8ee:	50 e0       	ldi	r21, 0x00	; 0
 8f0:	be 01       	movw	r22, r28
 8f2:	6f 5f       	subi	r22, 0xFF	; 255
 8f4:	7f 4f       	sbci	r23, 0xFF	; 255
 8f6:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <sw_msec>
 8fa:	90 91 5b 03 	lds	r25, 0x035B	; 0x80035b <sw_msec+0x1>
 8fe:	0e 94 de 02 	call	0x5bc	; 0x5bc <IntToStr>
	strcat(timeStr, buffer);
 902:	be 01       	movw	r22, r28
 904:	6f 5f       	subi	r22, 0xFF	; 255
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	c8 01       	movw	r24, r16
 90a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <strcat>
}
 90e:	0f 90       	pop	r0
 910:	0f 90       	pop	r0
 912:	0f 90       	pop	r0
 914:	0f 90       	pop	r0
 916:	df 91       	pop	r29
 918:	cf 91       	pop	r28
 91a:	1f 91       	pop	r17
 91c:	0f 91       	pop	r16
 91e:	ff 90       	pop	r15
 920:	ef 90       	pop	r14
 922:	08 95       	ret

00000924 <check_and_blink_led>:
// функція миготіння світлодіода
void check_and_blink_led() {
	if (hour_changed && led_blinks_remaining > 0) {
 924:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <hour_changed>
 928:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <hour_changed+0x1>
 92c:	89 2b       	or	r24, r25
 92e:	49 f1       	breq	.+82     	; 0x982 <check_and_blink_led+0x5e>
 930:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <led_blinks_remaining>
 934:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <led_blinks_remaining+0x1>
 938:	18 16       	cp	r1, r24
 93a:	19 06       	cpc	r1, r25
 93c:	14 f5       	brge	.+68     	; 0x982 <check_and_blink_led+0x5e>
 93e:	80 e0       	ldi	r24, 0x00	; 0
 940:	90 e0       	ldi	r25, 0x00	; 0
		for (int i = 0; i < led_blinks_remaining; i++) {
			PORTD |= 0x20;
 942:	95 9a       	sbi	0x12, 5	; 18
 944:	2f ef       	ldi	r18, 0xFF	; 255
 946:	31 ee       	ldi	r19, 0xE1	; 225
 948:	44 e0       	ldi	r20, 0x04	; 4
 94a:	21 50       	subi	r18, 0x01	; 1
 94c:	30 40       	sbci	r19, 0x00	; 0
 94e:	40 40       	sbci	r20, 0x00	; 0
 950:	e1 f7       	brne	.-8      	; 0x94a <check_and_blink_led+0x26>
 952:	00 c0       	rjmp	.+0      	; 0x954 <check_and_blink_led+0x30>
 954:	00 00       	nop
			_delay_ms(200);
			PORTD &= ~0x20;
 956:	95 98       	cbi	0x12, 5	; 18
 958:	2f ef       	ldi	r18, 0xFF	; 255
 95a:	31 ee       	ldi	r19, 0xE1	; 225
 95c:	44 e0       	ldi	r20, 0x04	; 4
 95e:	21 50       	subi	r18, 0x01	; 1
 960:	30 40       	sbci	r19, 0x00	; 0
 962:	40 40       	sbci	r20, 0x00	; 0
 964:	e1 f7       	brne	.-8      	; 0x95e <check_and_blink_led+0x3a>
 966:	00 c0       	rjmp	.+0      	; 0x968 <check_and_blink_led+0x44>
 968:	00 00       	nop
	strcat(timeStr, buffer);
}
// функція миготіння світлодіода
void check_and_blink_led() {
	if (hour_changed && led_blinks_remaining > 0) {
		for (int i = 0; i < led_blinks_remaining; i++) {
 96a:	01 96       	adiw	r24, 0x01	; 1
 96c:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <led_blinks_remaining>
 970:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <led_blinks_remaining+0x1>
 974:	82 17       	cp	r24, r18
 976:	93 07       	cpc	r25, r19
 978:	24 f3       	brlt	.-56     	; 0x942 <check_and_blink_led+0x1e>
			PORTD |= 0x20;
			_delay_ms(200);
			PORTD &= ~0x20;
			_delay_ms(200);
		}
		hour_changed = 0; // скидаємо прапорець
 97a:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <hour_changed+0x1>
 97e:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <hour_changed>
 982:	08 95       	ret

00000984 <main>:
}
//----------------------------------------------------|
//----------------------------------------------------|
//				   Функція main    			     	  |
//----------------------------------------------------|
int main(){
 984:	cf 93       	push	r28
 986:	df 93       	push	r29
 988:	cd b7       	in	r28, 0x3d	; 61
 98a:	de b7       	in	r29, 0x3e	; 62
 98c:	a7 97       	sbiw	r28, 0x27	; 39
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	f8 94       	cli
 992:	de bf       	out	0x3e, r29	; 62
 994:	0f be       	out	0x3f, r0	; 63
 996:	cd bf       	out	0x3d, r28	; 61
	char buf[30]; // буфер для команд
	char timeStr[9]; // буфер для рядка часу
	DDRD |= 0x20;  // PD5 як вихід ( зелений світлодіод )
 998:	8d 9a       	sbi	0x11, 5	; 17
	
	usart_Init(MYUBRR);	// ініціалізація USART
 99a:	83 e3       	ldi	r24, 0x33	; 51
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 3e 01 	call	0x27c	; 0x27c <usart_Init>
	lcd_init();	 // ініціалізація LCD
 9a2:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_init>
	Timer1_Init(); // ініціалізація таймера
 9a6:	0e 94 11 02 	call	0x422	; 0x422 <Timer1_Init>
	load_time_from_eeprom(); // завантаження часу
 9aa:	0e 94 c8 01 	call	0x390	; 0x390 <load_time_from_eeprom>
// початковий екран з поточним часом
	while (1) {
		check_and_blink_led(); //миготіння світлодіода
 9ae:	0e 94 92 04 	call	0x924	; 0x924 <check_and_blink_led>
		send_str("\rTime now (HH:MM:SS): "); 
 9b2:	87 e6       	ldi	r24, 0x67	; 103
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		usart_Time(timeStr); // формування рядка часу
 9ba:	ce 01       	movw	r24, r28
 9bc:	4f 96       	adiw	r24, 0x1f	; 31
 9be:	0e 94 c3 03 	call	0x786	; 0x786 <usart_Time>
		send_str(timeStr);
 9c2:	ce 01       	movw	r24, r28
 9c4:	4f 96       	adiw	r24, 0x1f	; 31
 9c6:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		Clock(); // вивід на LCD
 9ca:	0e 94 05 03 	call	0x60a	; 0x60a <Clock>
		// очікування натискання будь-якої клавіші
		if (UCSRA & (1 << RXC)) {
 9ce:	5f 9b       	sbis	0x0b, 7	; 11
 9d0:	ee cf       	rjmp	.-36     	; 0x9ae <main+0x2a>
			send_str("\r\n");
 9d2:	82 e6       	ldi	r24, 0x62	; 98
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			usart_ReceiveLine(buf, sizeof(buf));
 9da:	6e e1       	ldi	r22, 0x1E	; 30
 9dc:	70 e0       	ldi	r23, 0x00	; 0
 9de:	ce 01       	movw	r24, r28
 9e0:	01 96       	adiw	r24, 0x01	; 1
 9e2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usart_ReceiveLine>
	}
	while (1){
// якщо година змінилась - мигає стільки разів, скільки і годин стало
		 if (hour_changed && led_blinks_remaining > 0) {
			 for (int i = 0; i < led_blinks_remaining; i++) {
				 PORTD ^= 0x20; // перемикаємо світлодіод
 9e6:	68 94       	set
 9e8:	77 24       	eor	r7, r7
 9ea:	75 f8       	bld	r7, 5
			 }
			 hour_changed = 0; // скидаємо прапорець
		 }
		// анімація меню
		for (int i = 0; i < 4; i++) {
			lcd_put_cur(1, 0);
 9ec:	cc 24       	eor	r12, r12
 9ee:	c3 94       	inc	r12
 9f0:	d1 2c       	mov	r13, r1
		if (strcmp(buf, "Time") == 0 || strcmp(buf, "time") == 0 || strcmp(buf, "TIME") == 0) {
		lcd_send_cmd (0x01);
		while (1) {
			check_and_blink_led();
			send_str("\rTime now (HH:MM:SS): ");
			usart_Time(timeStr);
 9f2:	5e 01       	movw	r10, r28
 9f4:	2f e1       	ldi	r18, 0x1F	; 31
 9f6:	a2 0e       	add	r10, r18
 9f8:	b1 1c       	adc	r11, r1
			if (UCSRA & (1 << RXC)) {
				usart_ReceiveLine(buf, sizeof(buf));
				
				if (strcmp(buf, "Start") == 0 || strcmp(buf, "start") == 0 || strcmp(buf, "START") == 0) {
					lcd_send_cmd (0x01);
					stopwatch = 1;
 9fa:	ec 2c       	mov	r14, r12
 9fc:	fd 2c       	mov	r15, r13

		while (1) {
			if (stopwatch) {
				check_and_blink_led();
				send_str("\rStopwatch (HH:MM:SS:MS): ");
				usart_time_stopwatch(timeStr);
 9fe:	0a 2d       	mov	r16, r10
 a00:	1b 2d       	mov	r17, r11
			break;
		}
	}
	while (1){
// якщо година змінилась - мигає стільки разів, скільки і годин стало
		 if (hour_changed && led_blinks_remaining > 0) {
 a02:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <hour_changed>
 a06:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <hour_changed+0x1>
 a0a:	89 2b       	or	r24, r25
 a0c:	09 f4       	brne	.+2      	; 0xa10 <main+0x8c>
 a0e:	64 c2       	rjmp	.+1224   	; 0xed8 <main+0x554>
 a10:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <led_blinks_remaining>
 a14:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <led_blinks_remaining+0x1>
 a18:	18 16       	cp	r1, r24
 a1a:	19 06       	cpc	r1, r25
 a1c:	0c f0       	brlt	.+2      	; 0xa20 <main+0x9c>
 a1e:	5c c2       	rjmp	.+1208   	; 0xed8 <main+0x554>
 a20:	80 e0       	ldi	r24, 0x00	; 0
 a22:	90 e0       	ldi	r25, 0x00	; 0
			 for (int i = 0; i < led_blinks_remaining; i++) {
				 PORTD ^= 0x20; // перемикаємо світлодіод
 a24:	22 b3       	in	r18, 0x12	; 18
 a26:	27 25       	eor	r18, r7
 a28:	22 bb       	out	0x12, r18	; 18
 a2a:	3f ef       	ldi	r19, 0xFF	; 255
 a2c:	41 ee       	ldi	r20, 0xE1	; 225
 a2e:	24 e0       	ldi	r18, 0x04	; 4
 a30:	31 50       	subi	r19, 0x01	; 1
 a32:	40 40       	sbci	r20, 0x00	; 0
 a34:	20 40       	sbci	r18, 0x00	; 0
 a36:	e1 f7       	brne	.-8      	; 0xa30 <main+0xac>
 a38:	00 c0       	rjmp	.+0      	; 0xa3a <main+0xb6>
 a3a:	00 00       	nop
				 _delay_ms(200);
				 PORTD ^= 0x20; // вимикаємо
 a3c:	22 b3       	in	r18, 0x12	; 18
 a3e:	27 25       	eor	r18, r7
 a40:	22 bb       	out	0x12, r18	; 18
 a42:	3f ef       	ldi	r19, 0xFF	; 255
 a44:	41 ee       	ldi	r20, 0xE1	; 225
 a46:	24 e0       	ldi	r18, 0x04	; 4
 a48:	31 50       	subi	r19, 0x01	; 1
 a4a:	40 40       	sbci	r20, 0x00	; 0
 a4c:	20 40       	sbci	r18, 0x00	; 0
 a4e:	e1 f7       	brne	.-8      	; 0xa48 <main+0xc4>
 a50:	00 c0       	rjmp	.+0      	; 0xa52 <main+0xce>
 a52:	00 00       	nop
		}
	}
	while (1){
// якщо година змінилась - мигає стільки разів, скільки і годин стало
		 if (hour_changed && led_blinks_remaining > 0) {
			 for (int i = 0; i < led_blinks_remaining; i++) {
 a54:	01 96       	adiw	r24, 0x01	; 1
 a56:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <led_blinks_remaining>
 a5a:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <led_blinks_remaining+0x1>
 a5e:	82 17       	cp	r24, r18
 a60:	93 07       	cpc	r25, r19
 a62:	04 f3       	brlt	.-64     	; 0xa24 <main+0xa0>
				 PORTD ^= 0x20; // перемикаємо світлодіод
				 _delay_ms(200);
				 PORTD ^= 0x20; // вимикаємо
				 _delay_ms(200);
			 }
			 hour_changed = 0; // скидаємо прапорець
 a64:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <hour_changed+0x1>
 a68:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <hour_changed>
 a6c:	35 c2       	rjmp	.+1130   	; 0xed8 <main+0x554>
		 }
		// анімація меню
		for (int i = 0; i < 4; i++) {
			lcd_put_cur(1, 0);
 a6e:	60 e0       	ldi	r22, 0x00	; 0
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	8c 2d       	mov	r24, r12
 a74:	9d 2d       	mov	r25, r13
 a76:	0e 94 91 00 	call	0x122	; 0x122 <lcd_put_cur>
			lcd_send_cmd(0x01);
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 a80:	3f ef       	ldi	r19, 0xFF	; 255
 a82:	41 ee       	ldi	r20, 0xE1	; 225
 a84:	84 e0       	ldi	r24, 0x04	; 4
 a86:	31 50       	subi	r19, 0x01	; 1
 a88:	40 40       	sbci	r20, 0x00	; 0
 a8a:	80 40       	sbci	r24, 0x00	; 0
 a8c:	e1 f7       	brne	.-8      	; 0xa86 <main+0x102>
 a8e:	00 c0       	rjmp	.+0      	; 0xa90 <main+0x10c>
 a90:	00 00       	nop
			_delay_ms(200);
			lcd_put_cur(1, 0);
 a92:	60 e0       	ldi	r22, 0x00	; 0
 a94:	70 e0       	ldi	r23, 0x00	; 0
 a96:	8c 2d       	mov	r24, r12
 a98:	9d 2d       	mov	r25, r13
 a9a:	0e 94 91 00 	call	0x122	; 0x122 <lcd_put_cur>
			lcd_send_string("*Main menu*");
 a9e:	8e e7       	ldi	r24, 0x7E	; 126
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
 aa6:	9f ef       	ldi	r25, 0xFF	; 255
 aa8:	21 ee       	ldi	r18, 0xE1	; 225
 aaa:	34 e0       	ldi	r19, 0x04	; 4
 aac:	91 50       	subi	r25, 0x01	; 1
 aae:	20 40       	sbci	r18, 0x00	; 0
 ab0:	30 40       	sbci	r19, 0x00	; 0
 ab2:	e1 f7       	brne	.-8      	; 0xaac <main+0x128>
 ab4:	00 c0       	rjmp	.+0      	; 0xab6 <main+0x132>
 ab6:	00 00       	nop
 ab8:	41 e0       	ldi	r20, 0x01	; 1
 aba:	84 1a       	sub	r8, r20
 abc:	91 08       	sbc	r9, r1
				 _delay_ms(200);
			 }
			 hour_changed = 0; // скидаємо прапорець
		 }
		// анімація меню
		for (int i = 0; i < 4; i++) {
 abe:	b9 f6       	brne	.-82     	; 0xa6e <main+0xea>
			lcd_put_cur(1, 0);
			lcd_send_string("*Main menu*");
			_delay_ms(200);
		}
		// вивід головного меню в термінал
		send_str("\x1B[2J\x1B[H"); // очищення термінала 
 ac0:	8a e8       	ldi	r24, 0x8A	; 138
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r_____________Main menu_____________");
 ac8:	82 e9       	ldi	r24, 0x92	; 146
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r-----------------------------------");
 ad0:	88 eb       	ldi	r24, 0xB8	; 184
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\rInstructions:                ");
 ad8:	8e ed       	ldi	r24, 0xDE	; 222
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r-----------------------------------");
 ae0:	88 eb       	ldi	r24, 0xB8	; 184
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r|Mode          | - |Command    |");
 ae8:	8e ef       	ldi	r24, 0xFE	; 254
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r-----------------------------------");
 af0:	88 eb       	ldi	r24, 0xB8	; 184
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r|Current time  | - |'Time'     |");
 af8:	81 e2       	ldi	r24, 0x21	; 33
 afa:	91 e0       	ldi	r25, 0x01	; 1
 afc:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r|Configure time| - |'Config'   |");
 b00:	84 e4       	ldi	r24, 0x44	; 68
 b02:	91 e0       	ldi	r25, 0x01	; 1
 b04:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r|Stopwatch     | - |'Stopwatch'|");
 b08:	87 e6       	ldi	r24, 0x67	; 103
 b0a:	91 e0       	ldi	r25, 0x01	; 1
 b0c:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r-----------------------------------");
 b10:	88 eb       	ldi	r24, 0xB8	; 184
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r___________________________________");
 b18:	8a e8       	ldi	r24, 0x8A	; 138
 b1a:	91 e0       	ldi	r25, 0x01	; 1
 b1c:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		send_str("\n\r\n\rEnter command: ");
 b20:	80 eb       	ldi	r24, 0xB0	; 176
 b22:	91 e0       	ldi	r25, 0x01	; 1
 b24:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
		usart_ReceiveLine(buf, sizeof(buf)); // отримання команди
 b28:	6e e1       	ldi	r22, 0x1E	; 30
 b2a:	70 e0       	ldi	r23, 0x00	; 0
 b2c:	ce 01       	movw	r24, r28
 b2e:	01 96       	adiw	r24, 0x01	; 1
 b30:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usart_ReceiveLine>
		//команда Time
		if (strcmp(buf, "Time") == 0 || strcmp(buf, "time") == 0 || strcmp(buf, "TIME") == 0) {
 b34:	64 ec       	ldi	r22, 0xC4	; 196
 b36:	71 e0       	ldi	r23, 0x01	; 1
 b38:	ce 01       	movw	r24, r28
 b3a:	01 96       	adiw	r24, 0x01	; 1
 b3c:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 b40:	89 2b       	or	r24, r25
 b42:	81 f0       	breq	.+32     	; 0xb64 <main+0x1e0>
 b44:	69 ec       	ldi	r22, 0xC9	; 201
 b46:	71 e0       	ldi	r23, 0x01	; 1
 b48:	ce 01       	movw	r24, r28
 b4a:	01 96       	adiw	r24, 0x01	; 1
 b4c:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 b50:	89 2b       	or	r24, r25
 b52:	41 f0       	breq	.+16     	; 0xb64 <main+0x1e0>
 b54:	6e ec       	ldi	r22, 0xCE	; 206
 b56:	71 e0       	ldi	r23, 0x01	; 1
 b58:	ce 01       	movw	r24, r28
 b5a:	01 96       	adiw	r24, 0x01	; 1
 b5c:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 b60:	89 2b       	or	r24, r25
 b62:	e9 f4       	brne	.+58     	; 0xb9e <main+0x21a>
		lcd_send_cmd (0x01);
 b64:	81 e0       	ldi	r24, 0x01	; 1
 b66:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
		while (1) {
			check_and_blink_led();
 b6a:	0e 94 92 04 	call	0x924	; 0x924 <check_and_blink_led>
			send_str("\rTime now (HH:MM:SS): ");
 b6e:	87 e6       	ldi	r24, 0x67	; 103
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			usart_Time(timeStr);
 b76:	c5 01       	movw	r24, r10
 b78:	0e 94 c3 03 	call	0x786	; 0x786 <usart_Time>
			send_str(timeStr);
 b7c:	c5 01       	movw	r24, r10
 b7e:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			Clock();
 b82:	0e 94 05 03 	call	0x60a	; 0x60a <Clock>
			if (UCSRA & (1 << RXC)) {
 b86:	5f 9b       	sbis	0x0b, 7	; 11
 b88:	f0 cf       	rjmp	.-32     	; 0xb6a <main+0x1e6>
				usart_ReceiveLine(buf, sizeof(buf));
 b8a:	6e e1       	ldi	r22, 0x1E	; 30
 b8c:	70 e0       	ldi	r23, 0x00	; 0
 b8e:	ce 01       	movw	r24, r28
 b90:	01 96       	adiw	r24, 0x01	; 1
 b92:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usart_ReceiveLine>
				send_str("\r\n");
 b96:	82 e6       	ldi	r24, 0x62	; 98
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
				break;
		}
		}
		}
		// команда Config
		if (strcmp(buf, "Config") == 0 || strcmp(buf, "config") == 0 || strcmp(buf, "CONFIG") == 0) {
 b9e:	63 ed       	ldi	r22, 0xD3	; 211
 ba0:	71 e0       	ldi	r23, 0x01	; 1
 ba2:	ce 01       	movw	r24, r28
 ba4:	01 96       	adiw	r24, 0x01	; 1
 ba6:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 baa:	89 2b       	or	r24, r25
 bac:	89 f0       	breq	.+34     	; 0xbd0 <main+0x24c>
 bae:	6a ed       	ldi	r22, 0xDA	; 218
 bb0:	71 e0       	ldi	r23, 0x01	; 1
 bb2:	ce 01       	movw	r24, r28
 bb4:	01 96       	adiw	r24, 0x01	; 1
 bb6:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 bba:	89 2b       	or	r24, r25
 bbc:	49 f0       	breq	.+18     	; 0xbd0 <main+0x24c>
 bbe:	61 ee       	ldi	r22, 0xE1	; 225
 bc0:	71 e0       	ldi	r23, 0x01	; 1
 bc2:	ce 01       	movw	r24, r28
 bc4:	01 96       	adiw	r24, 0x01	; 1
 bc6:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 bca:	89 2b       	or	r24, r25
 bcc:	09 f0       	breq	.+2      	; 0xbd0 <main+0x24c>
 bce:	84 c0       	rjmp	.+264    	; 0xcd8 <main+0x354>
		lcd_send_cmd (0x01);
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 bd6:	68 94       	set
 bd8:	88 24       	eor	r8, r8
 bda:	82 f8       	bld	r8, 2
 bdc:	91 2c       	mov	r9, r1
		for (int i = 0; i < 4; i++) { 
			lcd_put_cur(1, 0);
 bde:	60 e0       	ldi	r22, 0x00	; 0
 be0:	70 e0       	ldi	r23, 0x00	; 0
 be2:	8c 2d       	mov	r24, r12
 be4:	9d 2d       	mov	r25, r13
 be6:	0e 94 91 00 	call	0x122	; 0x122 <lcd_put_cur>
			lcd_send_cmd(0x01);
 bea:	81 e0       	ldi	r24, 0x01	; 1
 bec:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 bf0:	8f ef       	ldi	r24, 0xFF	; 255
 bf2:	91 ee       	ldi	r25, 0xE1	; 225
 bf4:	24 e0       	ldi	r18, 0x04	; 4
 bf6:	81 50       	subi	r24, 0x01	; 1
 bf8:	90 40       	sbci	r25, 0x00	; 0
 bfa:	20 40       	sbci	r18, 0x00	; 0
 bfc:	e1 f7       	brne	.-8      	; 0xbf6 <main+0x272>
 bfe:	00 c0       	rjmp	.+0      	; 0xc00 <main+0x27c>
 c00:	00 00       	nop
			_delay_ms(200);
			lcd_put_cur(1, 0);
 c02:	60 e0       	ldi	r22, 0x00	; 0
 c04:	70 e0       	ldi	r23, 0x00	; 0
 c06:	8c 2d       	mov	r24, r12
 c08:	9d 2d       	mov	r25, r13
 c0a:	0e 94 91 00 	call	0x122	; 0x122 <lcd_put_cur>
			lcd_send_string("*Time settings*");
 c0e:	88 ee       	ldi	r24, 0xE8	; 232
 c10:	91 e0       	ldi	r25, 0x01	; 1
 c12:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
 c16:	3f ef       	ldi	r19, 0xFF	; 255
 c18:	41 ee       	ldi	r20, 0xE1	; 225
 c1a:	84 e0       	ldi	r24, 0x04	; 4
 c1c:	31 50       	subi	r19, 0x01	; 1
 c1e:	40 40       	sbci	r20, 0x00	; 0
 c20:	80 40       	sbci	r24, 0x00	; 0
 c22:	e1 f7       	brne	.-8      	; 0xc1c <main+0x298>
 c24:	00 c0       	rjmp	.+0      	; 0xc26 <main+0x2a2>
 c26:	00 00       	nop
 c28:	91 e0       	ldi	r25, 0x01	; 1
 c2a:	89 1a       	sub	r8, r25
 c2c:	91 08       	sbc	r9, r1
		}
		}
		// команда Config
		if (strcmp(buf, "Config") == 0 || strcmp(buf, "config") == 0 || strcmp(buf, "CONFIG") == 0) {
		lcd_send_cmd (0x01);
		for (int i = 0; i < 4; i++) { 
 c2e:	b9 f6       	brne	.-82     	; 0xbde <main+0x25a>
			lcd_put_cur(1, 0);
			lcd_send_string("*Time settings*");
			_delay_ms(200);
		}
		while (1) {
			send_str("\n\rWrite hours: ");
 c30:	88 ef       	ldi	r24, 0xF8	; 248
 c32:	91 e0       	ldi	r25, 0x01	; 1
 c34:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			usart_ReceiveLine(buf, sizeof(buf));
 c38:	6e e1       	ldi	r22, 0x1E	; 30
 c3a:	70 e0       	ldi	r23, 0x00	; 0
 c3c:	ce 01       	movw	r24, r28
 c3e:	01 96       	adiw	r24, 0x01	; 1
 c40:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usart_ReceiveLine>
			int h = atoi(buf);
 c44:	ce 01       	movw	r24, r28
 c46:	01 96       	adiw	r24, 0x01	; 1
 c48:	0e 94 99 07 	call	0xf32	; 0xf32 <atoi>
			if (h >= 0 && h <= 23) {
 c4c:	88 31       	cpi	r24, 0x18	; 24
 c4e:	91 05       	cpc	r25, r1
 c50:	28 f4       	brcc	.+10     	; 0xc5c <main+0x2d8>
				hours = h;
 c52:	90 93 5d 03 	sts	0x035D, r25	; 0x80035d <hours+0x1>
 c56:	80 93 5c 03 	sts	0x035C, r24	; 0x80035c <hours>
				break;
 c5a:	05 c0       	rjmp	.+10     	; 0xc66 <main+0x2e2>
				} else {
				send_str("\n\rInvalid input!.");
 c5c:	88 e0       	ldi	r24, 0x08	; 8
 c5e:	92 e0       	ldi	r25, 0x02	; 2
 c60:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			}
		}
 c64:	e5 cf       	rjmp	.-54     	; 0xc30 <main+0x2ac>
		while (1) {
			send_str("\n\rWrite minutes: ");
 c66:	8a e1       	ldi	r24, 0x1A	; 26
 c68:	92 e0       	ldi	r25, 0x02	; 2
 c6a:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			usart_ReceiveLine(buf, sizeof(buf));
 c6e:	6e e1       	ldi	r22, 0x1E	; 30
 c70:	70 e0       	ldi	r23, 0x00	; 0
 c72:	ce 01       	movw	r24, r28
 c74:	01 96       	adiw	r24, 0x01	; 1
 c76:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usart_ReceiveLine>
			int m = atoi(buf);
 c7a:	ce 01       	movw	r24, r28
 c7c:	01 96       	adiw	r24, 0x01	; 1
 c7e:	0e 94 99 07 	call	0xf32	; 0xf32 <atoi>
			if (m >= 0 && m <= 59) {
 c82:	8c 33       	cpi	r24, 0x3C	; 60
 c84:	91 05       	cpc	r25, r1
 c86:	28 f4       	brcc	.+10     	; 0xc92 <main+0x30e>
				minutes = m;
 c88:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 c8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				break;
 c90:	05 c0       	rjmp	.+10     	; 0xc9c <main+0x318>
				} else {
				send_str("\n\rInvalid input!");
 c92:	8c e2       	ldi	r24, 0x2C	; 44
 c94:	92 e0       	ldi	r25, 0x02	; 2
 c96:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			}
		}
 c9a:	e5 cf       	rjmp	.-54     	; 0xc66 <main+0x2e2>
		while (1) {
			send_str("\n\rWrite seconds: ");
 c9c:	8d e3       	ldi	r24, 0x3D	; 61
 c9e:	92 e0       	ldi	r25, 0x02	; 2
 ca0:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			usart_ReceiveLine(buf, sizeof(buf));
 ca4:	6e e1       	ldi	r22, 0x1E	; 30
 ca6:	70 e0       	ldi	r23, 0x00	; 0
 ca8:	ce 01       	movw	r24, r28
 caa:	01 96       	adiw	r24, 0x01	; 1
 cac:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usart_ReceiveLine>
			int s = atoi(buf);
 cb0:	ce 01       	movw	r24, r28
 cb2:	01 96       	adiw	r24, 0x01	; 1
 cb4:	0e 94 99 07 	call	0xf32	; 0xf32 <atoi>
			if (s >= 0 && s <= 59) {
 cb8:	8c 33       	cpi	r24, 0x3C	; 60
 cba:	91 05       	cpc	r25, r1
 cbc:	40 f4       	brcc	.+16     	; 0xcce <main+0x34a>
				seconds = s;
 cbe:	90 93 5f 03 	sts	0x035F, r25	; 0x80035f <seconds+0x1>
 cc2:	80 93 5e 03 	sts	0x035E, r24	; 0x80035e <seconds>
				break;
				} else {
				send_str("\n\rInvalid input!");
			}
		}
		lcd_send_cmd(0x01);
 cc6:	81 e0       	ldi	r24, 0x01	; 1
 cc8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <main+0x354>
			int s = atoi(buf);
			if (s >= 0 && s <= 59) {
				seconds = s;
				break;
				} else {
				send_str("\n\rInvalid input!");
 cce:	8c e2       	ldi	r24, 0x2C	; 44
 cd0:	92 e0       	ldi	r25, 0x02	; 2
 cd2:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			}
		}
 cd6:	e2 cf       	rjmp	.-60     	; 0xc9c <main+0x318>
		lcd_send_cmd(0x01);
	}
	// команда Stopwatch
		if (strcmp(buf, "Stopwatch") == 0 || strcmp(buf, "stopwatch") == 0 || strcmp(buf, "STOPWATCH") == 0) {
 cd8:	6f e4       	ldi	r22, 0x4F	; 79
 cda:	72 e0       	ldi	r23, 0x02	; 2
 cdc:	ce 01       	movw	r24, r28
 cde:	01 96       	adiw	r24, 0x01	; 1
 ce0:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 ce4:	89 2b       	or	r24, r25
 ce6:	89 f0       	breq	.+34     	; 0xd0a <main+0x386>
 ce8:	69 e5       	ldi	r22, 0x59	; 89
 cea:	72 e0       	ldi	r23, 0x02	; 2
 cec:	ce 01       	movw	r24, r28
 cee:	01 96       	adiw	r24, 0x01	; 1
 cf0:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 cf4:	89 2b       	or	r24, r25
 cf6:	49 f0       	breq	.+18     	; 0xd0a <main+0x386>
 cf8:	63 e6       	ldi	r22, 0x63	; 99
 cfa:	72 e0       	ldi	r23, 0x02	; 2
 cfc:	ce 01       	movw	r24, r28
 cfe:	01 96       	adiw	r24, 0x01	; 1
 d00:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 d04:	89 2b       	or	r24, r25
 d06:	09 f0       	breq	.+2      	; 0xd0a <main+0x386>
 d08:	7c ce       	rjmp	.-776    	; 0xa02 <main+0x7e>
			lcd_send_cmd(0x01);
 d0a:	81 e0       	ldi	r24, 0x01	; 1
 d0c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 d10:	68 94       	set
 d12:	88 24       	eor	r8, r8
 d14:	82 f8       	bld	r8, 2
 d16:	91 2c       	mov	r9, r1
			for (int i = 0; i < 4; i++) {
				lcd_put_cur(1, 0);
 d18:	60 e0       	ldi	r22, 0x00	; 0
 d1a:	70 e0       	ldi	r23, 0x00	; 0
 d1c:	8c 2d       	mov	r24, r12
 d1e:	9d 2d       	mov	r25, r13
 d20:	0e 94 91 00 	call	0x122	; 0x122 <lcd_put_cur>
				lcd_send_cmd(0x01);
 d24:	81 e0       	ldi	r24, 0x01	; 1
 d26:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 d2a:	2f ef       	ldi	r18, 0xFF	; 255
 d2c:	31 ee       	ldi	r19, 0xE1	; 225
 d2e:	44 e0       	ldi	r20, 0x04	; 4
 d30:	21 50       	subi	r18, 0x01	; 1
 d32:	30 40       	sbci	r19, 0x00	; 0
 d34:	40 40       	sbci	r20, 0x00	; 0
 d36:	e1 f7       	brne	.-8      	; 0xd30 <main+0x3ac>
 d38:	00 c0       	rjmp	.+0      	; 0xd3a <main+0x3b6>
 d3a:	00 00       	nop
				_delay_ms(200);
				lcd_put_cur(1, 0);
 d3c:	60 e0       	ldi	r22, 0x00	; 0
 d3e:	70 e0       	ldi	r23, 0x00	; 0
 d40:	8c 2d       	mov	r24, r12
 d42:	9d 2d       	mov	r25, r13
 d44:	0e 94 91 00 	call	0x122	; 0x122 <lcd_put_cur>
				lcd_send_string("*Stopwatch*");
 d48:	8d e6       	ldi	r24, 0x6D	; 109
 d4a:	92 e0       	ldi	r25, 0x02	; 2
 d4c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_send_string>
 d50:	8f ef       	ldi	r24, 0xFF	; 255
 d52:	91 ee       	ldi	r25, 0xE1	; 225
 d54:	24 e0       	ldi	r18, 0x04	; 4
 d56:	81 50       	subi	r24, 0x01	; 1
 d58:	90 40       	sbci	r25, 0x00	; 0
 d5a:	20 40       	sbci	r18, 0x00	; 0
 d5c:	e1 f7       	brne	.-8      	; 0xd56 <main+0x3d2>
 d5e:	00 c0       	rjmp	.+0      	; 0xd60 <main+0x3dc>
 d60:	00 00       	nop
 d62:	31 e0       	ldi	r19, 0x01	; 1
 d64:	83 1a       	sub	r8, r19
 d66:	91 08       	sbc	r9, r1
		lcd_send_cmd(0x01);
	}
	// команда Stopwatch
		if (strcmp(buf, "Stopwatch") == 0 || strcmp(buf, "stopwatch") == 0 || strcmp(buf, "STOPWATCH") == 0) {
			lcd_send_cmd(0x01);
			for (int i = 0; i < 4; i++) {
 d68:	b9 f6       	brne	.-82     	; 0xd18 <main+0x394>
				_delay_ms(200);
				lcd_put_cur(1, 0);
				lcd_send_string("*Stopwatch*");
				_delay_ms(200);
			}
			send_str("\x1B[2J\x1B[H"); 
 d6a:	8a e8       	ldi	r24, 0x8A	; 138
 d6c:	90 e0       	ldi	r25, 0x00	; 0
 d6e:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			send_str("\n\rStopwatch started. Use commands:\n\r");
 d72:	89 e7       	ldi	r24, 0x79	; 121
 d74:	92 e0       	ldi	r25, 0x02	; 2
 d76:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
			send_str("'Start' - begin\n\r'Stop' - pause\n\r'Reset' - zero\n\r'Exit' - return to main menu\n\r");
 d7a:	8e e9       	ldi	r24, 0x9E	; 158
 d7c:	92 e0       	ldi	r25, 0x02	; 2
 d7e:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>

		while (1) {
			if (stopwatch) {
 d82:	80 91 52 03 	lds	r24, 0x0352	; 0x800352 <stopwatch>
 d86:	90 91 53 03 	lds	r25, 0x0353	; 0x800353 <stopwatch+0x1>
 d8a:	89 2b       	or	r24, r25
 d8c:	81 f0       	breq	.+32     	; 0xdae <main+0x42a>
				check_and_blink_led();
 d8e:	0e 94 92 04 	call	0x924	; 0x924 <check_and_blink_led>
				send_str("\rStopwatch (HH:MM:SS:MS): ");
 d92:	8e ee       	ldi	r24, 0xEE	; 238
 d94:	92 e0       	ldi	r25, 0x02	; 2
 d96:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
				usart_time_stopwatch(timeStr);
 d9a:	80 2f       	mov	r24, r16
 d9c:	91 2f       	mov	r25, r17
 d9e:	0e 94 1e 04 	call	0x83c	; 0x83c <usart_time_stopwatch>
				send_str(timeStr);
 da2:	80 2f       	mov	r24, r16
 da4:	91 2f       	mov	r25, r17
 da6:	0e 94 4b 01 	call	0x296	; 0x296 <send_str>
				Stopwatch();
 daa:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Stopwatch>
			}

			if (UCSRA & (1 << RXC)) {
 dae:	5f 9b       	sbis	0x0b, 7	; 11
 db0:	e8 cf       	rjmp	.-48     	; 0xd82 <main+0x3fe>
				usart_ReceiveLine(buf, sizeof(buf));
 db2:	6e e1       	ldi	r22, 0x1E	; 30
 db4:	70 e0       	ldi	r23, 0x00	; 0
 db6:	ce 01       	movw	r24, r28
 db8:	01 96       	adiw	r24, 0x01	; 1
 dba:	0e 94 64 01 	call	0x2c8	; 0x2c8 <usart_ReceiveLine>
				
				if (strcmp(buf, "Start") == 0 || strcmp(buf, "start") == 0 || strcmp(buf, "START") == 0) {
 dbe:	69 e0       	ldi	r22, 0x09	; 9
 dc0:	73 e0       	ldi	r23, 0x03	; 3
 dc2:	ce 01       	movw	r24, r28
 dc4:	01 96       	adiw	r24, 0x01	; 1
 dc6:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 dca:	89 2b       	or	r24, r25
 dcc:	81 f0       	breq	.+32     	; 0xdee <main+0x46a>
 dce:	6f e0       	ldi	r22, 0x0F	; 15
 dd0:	73 e0       	ldi	r23, 0x03	; 3
 dd2:	ce 01       	movw	r24, r28
 dd4:	01 96       	adiw	r24, 0x01	; 1
 dd6:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 dda:	89 2b       	or	r24, r25
 ddc:	41 f0       	breq	.+16     	; 0xdee <main+0x46a>
 dde:	65 e1       	ldi	r22, 0x15	; 21
 de0:	73 e0       	ldi	r23, 0x03	; 3
 de2:	ce 01       	movw	r24, r28
 de4:	01 96       	adiw	r24, 0x01	; 1
 de6:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 dea:	89 2b       	or	r24, r25
 dec:	41 f4       	brne	.+16     	; 0xdfe <main+0x47a>
					lcd_send_cmd (0x01);
 dee:	81 e0       	ldi	r24, 0x01	; 1
 df0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
					stopwatch = 1;
 df4:	e0 92 52 03 	sts	0x0352, r14	; 0x800352 <stopwatch>
 df8:	f0 92 53 03 	sts	0x0353, r15	; 0x800353 <stopwatch+0x1>
 dfc:	c2 cf       	rjmp	.-124    	; 0xd82 <main+0x3fe>
					} else if (strcmp(buf, "Stop") == 0 || strcmp(buf, "stop") == 0 || strcmp(buf, "STOP") == 0) {
 dfe:	6b e1       	ldi	r22, 0x1B	; 27
 e00:	73 e0       	ldi	r23, 0x03	; 3
 e02:	ce 01       	movw	r24, r28
 e04:	01 96       	adiw	r24, 0x01	; 1
 e06:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 e0a:	89 2b       	or	r24, r25
 e0c:	81 f0       	breq	.+32     	; 0xe2e <main+0x4aa>
 e0e:	60 e2       	ldi	r22, 0x20	; 32
 e10:	73 e0       	ldi	r23, 0x03	; 3
 e12:	ce 01       	movw	r24, r28
 e14:	01 96       	adiw	r24, 0x01	; 1
 e16:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 e1a:	89 2b       	or	r24, r25
 e1c:	41 f0       	breq	.+16     	; 0xe2e <main+0x4aa>
 e1e:	65 e2       	ldi	r22, 0x25	; 37
 e20:	73 e0       	ldi	r23, 0x03	; 3
 e22:	ce 01       	movw	r24, r28
 e24:	01 96       	adiw	r24, 0x01	; 1
 e26:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 e2a:	89 2b       	or	r24, r25
 e2c:	29 f4       	brne	.+10     	; 0xe38 <main+0x4b4>
					stopwatch = 0;
 e2e:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <stopwatch+0x1>
 e32:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <stopwatch>
 e36:	a5 cf       	rjmp	.-182    	; 0xd82 <main+0x3fe>
					} else if (strcmp(buf, "Reset") == 0 || strcmp(buf, "reset") == 0 || strcmp(buf, "RESET") == 0) {
 e38:	6a e2       	ldi	r22, 0x2A	; 42
 e3a:	73 e0       	ldi	r23, 0x03	; 3
 e3c:	ce 01       	movw	r24, r28
 e3e:	01 96       	adiw	r24, 0x01	; 1
 e40:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 e44:	89 2b       	or	r24, r25
 e46:	81 f0       	breq	.+32     	; 0xe68 <main+0x4e4>
 e48:	60 e3       	ldi	r22, 0x30	; 48
 e4a:	73 e0       	ldi	r23, 0x03	; 3
 e4c:	ce 01       	movw	r24, r28
 e4e:	01 96       	adiw	r24, 0x01	; 1
 e50:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 e54:	89 2b       	or	r24, r25
 e56:	41 f0       	breq	.+16     	; 0xe68 <main+0x4e4>
 e58:	66 e3       	ldi	r22, 0x36	; 54
 e5a:	73 e0       	ldi	r23, 0x03	; 3
 e5c:	ce 01       	movw	r24, r28
 e5e:	01 96       	adiw	r24, 0x01	; 1
 e60:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 e64:	89 2b       	or	r24, r25
 e66:	b9 f4       	brne	.+46     	; 0xe96 <main+0x512>
					stopwatch = 0;
 e68:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <stopwatch+0x1>
 e6c:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <stopwatch>
					sw_hr = sw_min = sw_sec = sw_msec = 0;
 e70:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <sw_msec+0x1>
 e74:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <sw_msec>
 e78:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <sw_sec+0x1>
 e7c:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <sw_sec>
 e80:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <sw_min+0x1>
 e84:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <sw_min>
 e88:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <sw_hr+0x1>
 e8c:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <sw_hr>
					Stopwatch();
 e90:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Stopwatch>
 e94:	76 cf       	rjmp	.-276    	; 0xd82 <main+0x3fe>
					} else if (strcmp(buf, "Exit") == 0 || strcmp(buf, "exit") == 0 || strcmp(buf, "EXIT") == 0) {
 e96:	6c e3       	ldi	r22, 0x3C	; 60
 e98:	73 e0       	ldi	r23, 0x03	; 3
 e9a:	ce 01       	movw	r24, r28
 e9c:	01 96       	adiw	r24, 0x01	; 1
 e9e:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 ea2:	89 2b       	or	r24, r25
 ea4:	89 f0       	breq	.+34     	; 0xec8 <main+0x544>
 ea6:	61 e4       	ldi	r22, 0x41	; 65
 ea8:	73 e0       	ldi	r23, 0x03	; 3
 eaa:	ce 01       	movw	r24, r28
 eac:	01 96       	adiw	r24, 0x01	; 1
 eae:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 eb2:	89 2b       	or	r24, r25
 eb4:	49 f0       	breq	.+18     	; 0xec8 <main+0x544>
 eb6:	66 e4       	ldi	r22, 0x46	; 70
 eb8:	73 e0       	ldi	r23, 0x03	; 3
 eba:	ce 01       	movw	r24, r28
 ebc:	01 96       	adiw	r24, 0x01	; 1
 ebe:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
 ec2:	89 2b       	or	r24, r25
 ec4:	09 f0       	breq	.+2      	; 0xec8 <main+0x544>
 ec6:	5d cf       	rjmp	.-326    	; 0xd82 <main+0x3fe>
					stopwatch = 0;
 ec8:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <stopwatch+0x1>
 ecc:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <stopwatch>
					break;
				}
			}
		}
			lcd_send_cmd(0x01); // очищення LCD
 ed0:	81 e0       	ldi	r24, 0x01	; 1
 ed2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_send_cmd>
 ed6:	95 cd       	rjmp	.-1238   	; 0xa02 <main+0x7e>
 ed8:	68 94       	set
 eda:	88 24       	eor	r8, r8
 edc:	82 f8       	bld	r8, 2
 ede:	91 2c       	mov	r9, r1
 ee0:	c6 cd       	rjmp	.-1140   	; 0xa6e <main+0xea>

00000ee2 <__divmodhi4>:
 ee2:	97 fb       	bst	r25, 7
 ee4:	07 2e       	mov	r0, r23
 ee6:	16 f4       	brtc	.+4      	; 0xeec <__divmodhi4+0xa>
 ee8:	00 94       	com	r0
 eea:	07 d0       	rcall	.+14     	; 0xefa <__divmodhi4_neg1>
 eec:	77 fd       	sbrc	r23, 7
 eee:	09 d0       	rcall	.+18     	; 0xf02 <__divmodhi4_neg2>
 ef0:	0e 94 85 07 	call	0xf0a	; 0xf0a <__udivmodhi4>
 ef4:	07 fc       	sbrc	r0, 7
 ef6:	05 d0       	rcall	.+10     	; 0xf02 <__divmodhi4_neg2>
 ef8:	3e f4       	brtc	.+14     	; 0xf08 <__divmodhi4_exit>

00000efa <__divmodhi4_neg1>:
 efa:	90 95       	com	r25
 efc:	81 95       	neg	r24
 efe:	9f 4f       	sbci	r25, 0xFF	; 255
 f00:	08 95       	ret

00000f02 <__divmodhi4_neg2>:
 f02:	70 95       	com	r23
 f04:	61 95       	neg	r22
 f06:	7f 4f       	sbci	r23, 0xFF	; 255

00000f08 <__divmodhi4_exit>:
 f08:	08 95       	ret

00000f0a <__udivmodhi4>:
 f0a:	aa 1b       	sub	r26, r26
 f0c:	bb 1b       	sub	r27, r27
 f0e:	51 e1       	ldi	r21, 0x11	; 17
 f10:	07 c0       	rjmp	.+14     	; 0xf20 <__udivmodhi4_ep>

00000f12 <__udivmodhi4_loop>:
 f12:	aa 1f       	adc	r26, r26
 f14:	bb 1f       	adc	r27, r27
 f16:	a6 17       	cp	r26, r22
 f18:	b7 07       	cpc	r27, r23
 f1a:	10 f0       	brcs	.+4      	; 0xf20 <__udivmodhi4_ep>
 f1c:	a6 1b       	sub	r26, r22
 f1e:	b7 0b       	sbc	r27, r23

00000f20 <__udivmodhi4_ep>:
 f20:	88 1f       	adc	r24, r24
 f22:	99 1f       	adc	r25, r25
 f24:	5a 95       	dec	r21
 f26:	a9 f7       	brne	.-22     	; 0xf12 <__udivmodhi4_loop>
 f28:	80 95       	com	r24
 f2a:	90 95       	com	r25
 f2c:	bc 01       	movw	r22, r24
 f2e:	cd 01       	movw	r24, r26
 f30:	08 95       	ret

00000f32 <atoi>:
 f32:	fc 01       	movw	r30, r24
 f34:	88 27       	eor	r24, r24
 f36:	99 27       	eor	r25, r25
 f38:	e8 94       	clt
 f3a:	21 91       	ld	r18, Z+
 f3c:	20 32       	cpi	r18, 0x20	; 32
 f3e:	e9 f3       	breq	.-6      	; 0xf3a <atoi+0x8>
 f40:	29 30       	cpi	r18, 0x09	; 9
 f42:	10 f0       	brcs	.+4      	; 0xf48 <atoi+0x16>
 f44:	2e 30       	cpi	r18, 0x0E	; 14
 f46:	c8 f3       	brcs	.-14     	; 0xf3a <atoi+0x8>
 f48:	2b 32       	cpi	r18, 0x2B	; 43
 f4a:	41 f0       	breq	.+16     	; 0xf5c <atoi+0x2a>
 f4c:	2d 32       	cpi	r18, 0x2D	; 45
 f4e:	39 f4       	brne	.+14     	; 0xf5e <atoi+0x2c>
 f50:	68 94       	set
 f52:	04 c0       	rjmp	.+8      	; 0xf5c <atoi+0x2a>
 f54:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__mulhi_const_10>
 f58:	82 0f       	add	r24, r18
 f5a:	91 1d       	adc	r25, r1
 f5c:	21 91       	ld	r18, Z+
 f5e:	20 53       	subi	r18, 0x30	; 48
 f60:	2a 30       	cpi	r18, 0x0A	; 10
 f62:	c0 f3       	brcs	.-16     	; 0xf54 <atoi+0x22>
 f64:	1e f4       	brtc	.+6      	; 0xf6c <atoi+0x3a>
 f66:	90 95       	com	r25
 f68:	81 95       	neg	r24
 f6a:	9f 4f       	sbci	r25, 0xFF	; 255
 f6c:	08 95       	ret

00000f6e <strcat>:
 f6e:	fb 01       	movw	r30, r22
 f70:	dc 01       	movw	r26, r24
 f72:	0d 90       	ld	r0, X+
 f74:	00 20       	and	r0, r0
 f76:	e9 f7       	brne	.-6      	; 0xf72 <strcat+0x4>
 f78:	11 97       	sbiw	r26, 0x01	; 1
 f7a:	01 90       	ld	r0, Z+
 f7c:	0d 92       	st	X+, r0
 f7e:	00 20       	and	r0, r0
 f80:	e1 f7       	brne	.-8      	; 0xf7a <strcat+0xc>
 f82:	08 95       	ret

00000f84 <strcmp>:
 f84:	fb 01       	movw	r30, r22
 f86:	dc 01       	movw	r26, r24
 f88:	8d 91       	ld	r24, X+
 f8a:	01 90       	ld	r0, Z+
 f8c:	80 19       	sub	r24, r0
 f8e:	01 10       	cpse	r0, r1
 f90:	d9 f3       	breq	.-10     	; 0xf88 <strcmp+0x4>
 f92:	99 0b       	sbc	r25, r25
 f94:	08 95       	ret

00000f96 <strcpy>:
 f96:	fb 01       	movw	r30, r22
 f98:	dc 01       	movw	r26, r24
 f9a:	01 90       	ld	r0, Z+
 f9c:	0d 92       	st	X+, r0
 f9e:	00 20       	and	r0, r0
 fa0:	e1 f7       	brne	.-8      	; 0xf9a <strcpy+0x4>
 fa2:	08 95       	ret

00000fa4 <__mulhi_const_10>:
 fa4:	7a e0       	ldi	r23, 0x0A	; 10
 fa6:	97 9f       	mul	r25, r23
 fa8:	90 2d       	mov	r25, r0
 faa:	87 9f       	mul	r24, r23
 fac:	80 2d       	mov	r24, r0
 fae:	91 0d       	add	r25, r1
 fb0:	11 24       	eor	r1, r1
 fb2:	08 95       	ret

00000fb4 <eeprom_read_byte>:
 fb4:	e1 99       	sbic	0x1c, 1	; 28
 fb6:	fe cf       	rjmp	.-4      	; 0xfb4 <eeprom_read_byte>
 fb8:	9f bb       	out	0x1f, r25	; 31
 fba:	8e bb       	out	0x1e, r24	; 30
 fbc:	e0 9a       	sbi	0x1c, 0	; 28
 fbe:	99 27       	eor	r25, r25
 fc0:	8d b3       	in	r24, 0x1d	; 29
 fc2:	08 95       	ret

00000fc4 <eeprom_update_byte>:
 fc4:	26 2f       	mov	r18, r22

00000fc6 <eeprom_update_r18>:
 fc6:	e1 99       	sbic	0x1c, 1	; 28
 fc8:	fe cf       	rjmp	.-4      	; 0xfc6 <eeprom_update_r18>
 fca:	9f bb       	out	0x1f, r25	; 31
 fcc:	8e bb       	out	0x1e, r24	; 30
 fce:	e0 9a       	sbi	0x1c, 0	; 28
 fd0:	01 97       	sbiw	r24, 0x01	; 1
 fd2:	0d b2       	in	r0, 0x1d	; 29
 fd4:	02 16       	cp	r0, r18
 fd6:	31 f0       	breq	.+12     	; 0xfe4 <eeprom_update_r18+0x1e>
 fd8:	2d bb       	out	0x1d, r18	; 29
 fda:	0f b6       	in	r0, 0x3f	; 63
 fdc:	f8 94       	cli
 fde:	e2 9a       	sbi	0x1c, 2	; 28
 fe0:	e1 9a       	sbi	0x1c, 1	; 28
 fe2:	0f be       	out	0x3f, r0	; 63
 fe4:	08 95       	ret

00000fe6 <_exit>:
 fe6:	f8 94       	cli

00000fe8 <__stop_program>:
 fe8:	ff cf       	rjmp	.-2      	; 0xfe8 <__stop_program>
